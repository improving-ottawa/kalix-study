syntax = "proto3";


package app.improving.ordercontext;

import "app/improving/order/api/order_api.proto";
import "app/improving/order/domain/order_context_domain.proto";
import "app/improving/product/api/product_api.proto";
import "app/improving/product/domain/product_context_domain.proto";
import "kalix/annotations.proto";

/**
 * "SELECT"
 *            "members.memberId AS memberId "
 *            "members.info AS info "
 *            "members.meta AS meta "
 *            "members.meta.memberStatus AS status "
 *            "FROM members "
 *            "JOIN orders ON orders.meta.memberId = members.member_id "
 *            "JOIN products ON products.product_id = ANY(orders.lineItems.product.id) "
 *            "JOIN events ON products.info.event.id = events.event_id "
 *            "WHERE :given_time >= events.info.expectedStart AND :given_time < events.info.expectedEnd "
 */

message OrderByProductRequest {
    string sku = 1;
}

message OrderResponse {
    string order_id = 1;
    order.ApiOrderInfo info = 2;
    order.ApiOrderMetaInfo meta = 3;
}

message OrderByProductResponse {
    repeated OrderResponse orders = 1;
}

service OrderByProductQuery {
    option (kalix.codegen) = {
        view: {}
    };

    rpc ProcessOrderCreated(ordercontext.OrderCreated) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "order_by_product_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderStatusUpdated(ordercontext.OrderStatusUpdated) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "order_by_product_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderInfoUpdated(ordercontext.OrderInfoUpdated) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "order_by_product_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderCanceled(ordercontext.OrderCanceled) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "order_by_product_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderReleased(ordercontext.OrderReleased) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "order_by_product_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderPending(ordercontext.OrderPending) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "order_by_product_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderInProgressed(ordercontext.OrderInProgressed) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "order_by_product_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderReadied(ordercontext.OrderReadied) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "order_by_product_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderDelivered(ordercontext.OrderDelivered) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "order_by_product_order"
            transform_updates: true
        };
    }

//    rpc ProcessProductCreated(productcontext.product.ApiProductCreated) returns (productcontext.product.ApiProduct) {
//        option (kalix.method).eventing.in.direct = {
//            service: "kalix-study-product"
//            event_stream_id: "event_products"
//        };
//        option (kalix.method).view.update = {
//            table: "order_by_product_product"
//            transform_updates: true
//        };
//    }
//
//    rpc ProcessProductInfoUpdated(productcontext.product.ApiProductInfoUpdated) returns (productcontext.product.ApiProduct) {
//        option (kalix.method).eventing.in.direct = {
//            service: "kalix-study-product"
//            event_stream_id: "event_products"
//        };
//        option (kalix.method).view.update = {
//            table: "order_by_product_product"
//            transform_updates: true
//        };
//    }
//
//    rpc ProcessProductDeleted(productcontext.product.ApiProductDeleted) returns (productcontext.product.ApiProduct) {
//        option (kalix.method).eventing.in.direct = {
//            service: "kalix-study-product"
//            event_stream_id: "event_products"
//        };
//        option (kalix.method).view.update = {
//            table: "order_by_product_product"
//            transform_updates: true
//        };
//    }
//
//    rpc ProcessProductActivated(productcontext.product.ApiProductActivated) returns (productcontext.product.ApiProduct) {
//        option (kalix.method).eventing.in.direct = {
//            service: "kalix-study-product"
//            event_stream_id: "event_products"
//        };
//        option (kalix.method).view.update = {
//            table: "order_by_product_product"
//            transform_updates: true
//        };
//    }
//
//    rpc ProcessProductInactivated(productcontext.product.ApiProductInactivated) returns (productcontext.product.ApiProduct) {
//        option (kalix.method).eventing.in.direct = {
//            service: "kalix-study-product"
//            event_stream_id: "event_products"
//        };
//        option (kalix.method).view.update = {
//            table: "order_by_product_product"
//            transform_updates: true
//        };
//    }

    rpc FindOrdersByProducts(OrderByProductRequest) returns (OrderByProductResponse) {
        option (kalix.method).view.query = {
            query: "SELECT "
                    "(order_by_product_order.order_id AS order_id, order_by_product_order.info AS info, order_by_product_order.meta AS meta) AS orders "
                    "FROM  order_by_product_order "
                    "WHERE :sku = ANY(order_by_product_order.info.line_items.product.sku) "
        };
    }
}