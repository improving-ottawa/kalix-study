syntax = "proto3";

package app.improving.gateway;

import "app/improving/member/api/member_api.proto";
import "app/improving/product/api/product_api.proto";
import "app/improving/store/api/store_api.proto";
import "app/improving/event/api/event_api.proto";
import "app/improving/tenant/api/tenant_api.proto";
import "common_api.proto";
import "app/improving/organization/api/organization_api.proto";
import "google/protobuf/wrappers.proto";

message CreateTenant {
    tenantcontext.tenant.ApiInfo tenant_info = 1;
}

message TenantCreated {
    ApiTenantId tenant_created = 1;
}

message CreateTenants {
    repeated tenantcontext.tenant.ApiInfo tenant_info = 1;
}

message TenantsCreated {
    repeated ApiTenantId tenants_created = 1;
}

message EstablishOrganization {
    organizationcontext.organization.ApiInfo info = 2;
    organizationcontext.organization.ApiParent parent = 3;
    repeated ApiMemberId members = 4;
    repeated ApiMemberId owners = 5;
    repeated organizationcontext.organization.ApiContacts contacts = 6;
    ApiMemberId establishingMember = 7;
    organizationcontext.organization.ApiMetaInfo meta = 8;
}

message CreateOrganization {
    EstablishOrganization establish_organization = 1;
}

message OrganizationCreated {
    ApiOrganizationId organization_created = 1;
}

message CreateOrganizations {
    repeated EstablishOrganization establish_organizations = 1;
}

message OrganizationsCreated {
    repeated ApiOrganizationId organizations_created = 1;
}

message ScheduleEvent {
    eventcontext.event.ApiEventInfo info = 1;
    ApiMemberId schedulingMember = 2;
}

message CreateEvent {
    ScheduleEvent schedule_event = 1;
}

message EventCreated {
    ApiEventId event_created = 1;
}

message CreateEvents {
    repeated ScheduleEvent schedule_events = 1;
}

message EventsCreated {
    repeated ApiEventId events_created = 1;
}

message EstablishStore {
    storecontext.store.ApiStoreInfo info = 1;
    ApiMemberId creatingMember = 2;
}

message CreateStore {
    EstablishStore establish_store = 1;
}

message StoreCreated {
    ApiStoreId store_created = 1;
}

message CreateStores {
    repeated EstablishStore establish_stores = 1;
}

message StoresCreated {
    repeated ApiStoreId stores_created = 1;
}

message EstablishProduct {
    productcontext.product.ApiProductInfo info = 1;
    productcontext.product.ApiProductMetaInfo meta = 2;
}

message CreateProduct {
    EstablishProduct establish_product = 1;;
}

message ProductCreated {
    ApiProductId product_created = 1;
}

message CreateProducts {
    repeated EstablishProduct establish_products = 1;
}

message ProductsCreated {
    repeated ApiProductId products_created = 1;
}

message EstablishMember {
    membercontext.member.ApiInfo info = 1;
    ApiMemberId registeringMember = 2;
}

message RegisterMember {
    EstablishMember establish_member = 1;
}

message MemberRegistered {
    ApiMemberId member_registered  =1;
}

message RegisterMembers {
    repeated EstablishMember establish_members = 1;

}

message MembersRegistered {
    repeated ApiMemberId members_registered  =1;
}

message ScenarioInfo {
    uint32 num_tenants = 1;
    uint32 num_orgs_per_tenant = 2;
    uint32 num_members_per_org = 3;
    uint32 num_events_per_org = 4;
    uint32 num_stores = 5;
    uint32 num_products_per_event = 6;
    uint32 num_orders_per_member = 7;
}

message StartScenario {
    ScenarioInfo scenario_info = 1;
}

message OrganizationIds {
    repeated ApiOrganizationId org_ids = 1;
}

message MemberIds {
    repeated ApiMemberId member_ids = 1;
}

message EventIds {
    repeated ApiEventId event_ids = 1;
}

message OrderIds {
    repeated ApiOrderId order_ids = 1;
}

message StoreIds {
    repeated ApiStoreId store_ids = 1;
}

message Skus {
    repeated ApiProductId skus = 1;
}

message ScenarioResults {
        repeated ApiTenantId tenants = 1;
         map<string, OrganizationIds> orgs_for_tenants = 2;
         map<string, MemberIds> members_for_orgs = 3;
         map<string, EventIds> events_for_orgs = 4;
         map<string, OrderIds> orders_for_members = 5;
        StoreIds store_ids = 6;
        map<string, Skus> products_for_stores = 7;
}