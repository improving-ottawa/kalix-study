syntax = "proto3";

package app.improving.projection;

import "app/improving/event/domain/event_context_domain.proto";
import "app/improving/member/domain/member_context_domain.proto";
import "app/improving/order/domain/order_context_domain.proto";
import "app/improving/organization/domain/organization_context_domain.proto";
import "app/improving/product/domain/product_context_domain.proto";
import "app/improving/projection/common/common_domain.proto";
import "kalix/annotations.proto";

message FindOrgsByMembersForEvents {
    repeated string event_id = 1;
}

service OrganizationsForMembersAttendingEvents {
    option (kalix.codegen) = {
        view: {}
    };
    rpc ProcessOrganizationEstablished(organizationcontext.OrganizationEstablished) returns (OrgsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "organizations"
            transform_updates: true
        };
    }

    rpc ProcessOrganizationStatusUpdated(organizationcontext.OrganizationStatusUpdated) returns (OrgsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "organizations"
            transform_updates: true
        };
    }

    rpc ProcessMemberRegistered(membercontext.MemberRegistered) returns (MembersTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "members"
        };
        option (kalix.method).view.update = {
            table: "members"
            transform_updates: true
        };
    }

    rpc ProcessMemberStatusUpdated(membercontext.MemberStatusUpdated) returns (MembersTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "members"
        };
        option (kalix.method).view.update = {
            table: "members"
            transform_updates: true
        };
    }

    rpc ProcessMemberRegisteredCorrTable(membercontext.MemberRegistered) returns (OrgMemberCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "members"
        };
        option (kalix.method).view.update = {
            table: "org_member_corr"
            transform_updates: true
        };
    }

    rpc ProcessEventScheduled(eventcontext.EventScheduled) returns (EventsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "events"
        };
        option (kalix.method).view.update = {
            table: "events"
            transform_updates: true
        };
    }

    rpc ProcessProductCreated(productcontext.ProductCreated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "ticket_event_corr"
            transform_updates: true
        };
    }

    rpc ProcessProductActivated(productcontext.ProductActivated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "ticket_event_corr"
            transform_updates: true
        };
    }

    rpc ProcessProductInactivated(productcontext.ProductInactivated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "ticket_event_corr"
            transform_updates: true
        };
    }

    rpc ProcessProductDeleted(productcontext.ProductDeleted) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "ticket_event_corr"
            transform_updates: true
        };
    }

    rpc ProcessOrderCreated(ordercontext.OrderCreated) returns (OrderTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "orders"
            transform_updates: true
        };
    }

    rpc ProcessOrderStatusUpdated(ordercontext.OrderStatusUpdated) returns (OrderTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "orders"
            transform_updates: true
        };
    }

    rpc ProcessLineItemCreated(ordercontext.LineItemOrdered) returns (TicketMemberCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "ticket_member_corr"
            transform_updates: true
        };
    }

    rpc ProcessLineItemCancelled(ordercontext.LineItemCancelled) returns (TicketMemberCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "orders"
        };
        option (kalix.method).view.update = {
            table: "ticket_member_corr"
            transform_updates: true
        };
    }

    rpc ProcessFindOrgsByMembersForEvents(FindOrgsByMembersForEvents) returns (OrgAndMembersAndEvents) {
        option (kalix.method).view.query = {
            query: "SELECT "
                    "(organizations.attending_member_org_id, organizations.attending_member_org_name) as org_infos, "
                    "(organizations.attending_member_org, (members.attending_member_id, members.attending_member_name) as member_infos) as org_members, "
                    "(member.attendingMember, (events.*) as event_infos) as member_events "
                    "FROM ticket_event_corr "
                    "JOIN ticket_member_corr ON ticket_event_corr.ticketSKU = ticket_member_corr.ticketSKU "
                    "JOIN org_member_corr ON ticket_member_corr.attendingMember_id = org_member_corr.attendingMember_id "
                    "JOIN organizations ON org_member_corr.attending_member_org_id = organizations.attending_member_org_id "
                    "JOIN members ON org_member_corr.attendingMember_id = members.attendingMember_id "
                    "JOIN orders ON ticket_member_corr.order_id = orders.order_id "
                    "WHERE ticket_event_corr.event = :eventId "
                    "AND organizations.status = 'ACTIVE' "
                    "AND members.status = 'ACTIVE' "
                    "AND ticket_event_corr.status = 'ACTIVE' "
                    "AND (orders.status = 'DELIVERED' OR orders.status = 'READY') "
        };
    }
}
