// This is the public API offered by your entity.
syntax = "proto3";

import "com/improving/domain/common_domain.proto";
import "com/improving/domain/organization_context_domain.proto";
import "com/improving/domain/organization_domain.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "kalix/annotations.proto";
import "google/api/annotations.proto";

package com.improving.organization;

message ApiOrganization {
    ApiOrganizationId oid = 1;
    ApiInfo info = 2;
    ApiOrganizationId parent = 3;
    repeated string member_ids = 4;
    repeated string owner_ids = 5;
    repeated ApiContacts contacts = 6;
    ApiMetaInfo orgMeta = 7;
    string name = 8;
    ApiOrganizationStatus status = 9;
}

enum ApiOrganizationStatus {
    DRAFT = 0;
    ACTIVE = 1;
    SUSPENDED = 2;
    TERMINATED = 3;
}


message ApiUSPostalCode {
    string postal_code = 1;
}

message ApiCAPostalCode {
    string postal_code = 1;
}

message ApiAddress {
        string line1 = 1;
        string line2 = 2;
        string city = 3;
        string stateProvince = 4;
        string country = 5;
        oneof postal_code {
            ApiUSPostalCode us_postal_code = 6;
            ApiCAPostalCode ca_postal_code = 7;
        }
}

message ApiInfo {
        string name = 1;
        string shortName = 2;
        ApiAddress address = 3;
        bool isPrivate = 4;
        string url = 5; // URL type?
        string logo = 6; // URL type?
}

message ApiMetaInfo {
    google.protobuf.Timestamp createdOn = 1;
    ApiMemberId createdBy = 2;
    google.protobuf.Timestamp   lastUpdated = 3;
    ApiMemberId lastUpdatedBy = 4;
    ApiOrganizationStatus currentStatus = 5;
    repeated ApiOrganizationId children = 6;
}

message ApiOrganizationId {
    string id = 1;
}

message ApiParent {
    string org_id = 1 [(kalix.field).entity_key = true];
}

message ApiMemberId {
    string member_id = 1 [(kalix.field).entity_key = true];
}

message ApiGetOrganizationInfo {
    string org_id = 1 [(kalix.field).entity_key = true];
}

message ApiContacts {
    repeated ApiMemberId primaryContacts = 1;
    repeated ApiMemberId billingContacts = 2;
    repeated ApiMemberId distributionContacts = 3;
}

message ApiUpdateInfo {
    string name = 1;
    string shortName = 2;
    ApiAddress address = 3;
    bool isPrivate = 4;
    string url = 5; // URL type?
    string logo = 6; // URL type?
}

message ApiUpdateParent {
    string org_id = 1 [(kalix.field).entity_key = true];
    ApiOrganizationId newParent = 2;
}

message ApiAddMembersToOrganization {
    string org_id = 1 [(kalix.field).entity_key = true];
    repeated ApiMemberId membersToAdd = 2;
    ApiMemberId updatingMember = 3;
}

message ApiAddOwnersToOrganization {
    string org_id = 1 [(kalix.field).entity_key = true];
    repeated ApiMemberId ownersToAdd = 2;
    ApiMemberId updatingMember = 3;
}

message ApiEditOrganizationInfo {
    string org_id = 1 [(kalix.field).entity_key = true];
    ApiUpdateInfo newInfo = 2;
    ApiMemberId editingMember = 3;
}

message ApiEstablishOrganization {
    string org_id = 1 [(kalix.field).entity_key = true];
    ApiInfo info = 2;
    ApiParent parent = 3;
    repeated ApiMemberId members = 4;
    repeated ApiMemberId owners = 5;
    repeated ApiContacts contacts = 6;
    ApiMemberId establishingMember = 7;
    ApiMetaInfo meta = 8;
}

message ApiRemoveOwnersFromOrganization {
    string org_id = 1 [(kalix.field).entity_key = true];
    repeated ApiMemberId ownersToRemove = 2;
    ApiMemberId updatingMember = 3;

}

message ApiRemoveMembersFromOrganization {
    string org_id = 1 [(kalix.field).entity_key = true];
    repeated ApiMemberId membersToRemove = 2;
    ApiMemberId updatingMember = 3;
}

message ApiOrganizationStatusUpdated {
    string org_id = 1 [(kalix.field).entity_key = true];
    ApiOrganizationStatus newStatus = 2;
}

message ApiOrganizationListByMember {
    ApiMemberId member = 1;
    repeated ApiOrganizationId organizations = 2;
}

message ApiOrganizationListByOwner {
    ApiMemberId owner = 1;
    repeated ApiOrganizationId organizations = 2;
}

service OrganizationService {

    option (kalix.codegen) = {
        event_sourced_entity: {
            name: "com.improving.organizationcontext.organization.OrganizationAPI"
            entity_type: "organizations"
            state: "com.improving.organizationcontext.organization.OrganizationState"
            events: [
                "com.improving.organizationcontext.FindOrganizationsByMember",
                "com.improving.organizationcontext.FindOrganizationsByOwner",
                "com.improving.organizationcontext.GetOrganizationInfo",
                "com.improving.organizationcontext.MembersAddedToOrganization",
                "com.improving.organizationcontext.MembersRemovedFromOrganization",
                "com.improving.organizationcontext.OrganizationAccountsUpdated",
                "com.improving.organizationcontext.OrganizationContactsUpdated",
                "com.improving.organizationcontext.OrganizationEstablished",
                "com.improving.organizationcontext.OrganizationInfoUpdated",
                "com.improving.organizationcontext.OrganizationStatusUpdated",
                "com.improving.organizationcontext.OwnersAddedToOrganization",
                "com.improving.organizationcontext.OwnersRemovedFromOrganization",
                "com.improving.organizationcontext.ParentUpdated"]
        }
    };

    rpc FindOrganizationsByOwner(ApiMemberId) returns (ApiOrganizationListByOwner) {
        option (google.api.http) = {
            get: "/organizations/by_owner/{member_id}"
            body: "*"
        };
    }

    rpc FindOrganizationsByMember(ApiMemberId) returns (ApiOrganizationListByMember) {
        option (google.api.http) = {
            get: "/organizations/by_member/{member_id}"
            body: "*"
        };
    }

    rpc GetOrganizationInfo(ApiGetOrganizationInfo) returns (ApiInfo) {
        option (google.api.http) = {
            post: "/organization/{org_id}/organization-info"
            body: "*"
        };
    }

    rpc AddMembersToOrganization(ApiAddMembersToOrganization) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/add-members"
            body: "*"
        };
    }

    rpc RemoveMembersFromOrganization(ApiRemoveMembersFromOrganization) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/remove-members"
            body: "*"
        };
    }

    rpc AddOwnersToOrganization(ApiAddOwnersToOrganization) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/add-owners"
            body: "*"
        };
    }

    rpc RemoveOwnersFromOrganization(ApiRemoveOwnersFromOrganization) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/remove-owners"
            body: "*"
        };
    }

    rpc EditOrganizationInfo(ApiEditOrganizationInfo) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/edit-organization-info"
            body: "*"
        };
    }

    rpc EstablishOrganization(ApiEstablishOrganization) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/establish-organization"
            body: "*"
        };
    }

    rpc UpdateParent(ApiUpdateParent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/update-parent"
            body: "*"
        };
    }

    rpc UpdateOrganizationStatus(ApiOrganizationStatusUpdated) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/update-organization-status"
            body: "*"
        };
    }

}
