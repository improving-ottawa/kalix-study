syntax = "proto3";

package com.improving.membercontext.membermap;

import "com/improving/common/common_domain.proto";
import "com/improving/member/domain/member_context_domain.proto";
import "google/protobuf/empty.proto";
import "kalix/annotations.proto";

message Key {
    string id = 1;
}

message Value {
    Contact contact = 1;
    string handle = 2;
    string avatar = 3; // URL type?
    string firstName = 4;
    string lastName = 5;
    MobileNumber mobileNumber = 6;
    EmailAddress emailAddress = 7;
    NotificationPreference notificationPreference = 8;
    repeated OrganizationId organizationMembership = 9;
    TenantId tenant = 10;
}

message SetValue {
    string member_map_id = 1 [(kalix.field).entity_key = true];
    Key key = 2;
    Value value = 3;
}

message RemoveValue {
    string member_map_id = 1 [(kalix.field).entity_key = true];
    Key key = 2;
}

message GetValue {
    string member_map_id = 1 [(kalix.field).entity_key = true];
    Key key = 2;
}

message CurrentValue {
    Key key = 1;
    Value value = 2;
}

message GetAllValues {
    string member_map_id = 1 [(kalix.field).entity_key = true];
}

message CurrentValues {
    repeated CurrentValue values = 1;
}

service MemberMapService {
    option (kalix.codegen) = {
        replicated_entity: {
            name: "com.improving.membercontext.membermap.MemberMap"
            entity_type: "member-map"
            replicated_register_map: {
                key: "com.improving.membercontext.membermap.MemberId"
                value: "com.improving.membercontext.membermap.Info"
            }
        }
    };

    rpc Set(SetValue) returns (google.protobuf.Empty);
    rpc Remove(RemoveValue) returns (google.protobuf.Empty);
    rpc Get(GetValue) returns (CurrentValue);
    rpc GetAll(GetAllValues) returns (CurrentValues);
}