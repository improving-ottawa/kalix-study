syntax = "proto3";

import "com/improving/organization/api/organization_api.proto";
import "google/protobuf/empty.proto";
import "kalix/annotations.proto";
import "google/api/annotations.proto";

package com.improving.organization;

service OrganizationService {

    option (kalix.codegen) = {
        event_sourced_entity: {
            name: "com.improving.organizationcontext.organization.OrganizationAPI"
            entity_type: "organizations"
            state: "com.improving.organizationcontext.organization.OrganizationState"
            events: [
                "com.improving.organizationcontext.FindOrganizationsByMember",
                "com.improving.organizationcontext.FindOrganizationsByOwner",
                "com.improving.organizationcontext.GetOrganizationInfo",
                "com.improving.organizationcontext.MembersAddedToOrganization",
                "com.improving.organizationcontext.MembersRemovedFromOrganization",
                "com.improving.organizationcontext.OrganizationAccountsUpdated",
                "com.improving.organizationcontext.OrganizationContactsUpdated",
                "com.improving.organizationcontext.OrganizationEstablished",
                "com.improving.organizationcontext.OrganizationInfoUpdated",
                "com.improving.organizationcontext.OrganizationStatusUpdated",
                "com.improving.organizationcontext.OwnersAddedToOrganization",
                "com.improving.organizationcontext.OwnersRemovedFromOrganization",
                "com.improving.organizationcontext.ParentUpdated"]
        }
    };

    rpc GetOrganizationInfo(ApiGetOrganizationInfo) returns (ApiInfo) {
        option (google.api.http) = {
            post: "/organization/{org_id}/organization-info"
            body: "*"
        };
    }

    rpc AddMembersToOrganization(ApiAddMembersToOrganization) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/add-members"
            body: "*"
        };
    }

    rpc RemoveMembersFromOrganization(ApiRemoveMembersFromOrganization) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/remove-members"
            body: "*"
        };
    }

    rpc AddOwnersToOrganization(ApiAddOwnersToOrganization) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/add-owners"
            body: "*"
        };
    }

    rpc RemoveOwnersFromOrganization(ApiRemoveOwnersFromOrganization) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/remove-owners"
            body: "*"
        };
    }

    rpc EditOrganizationInfo(ApiEditOrganizationInfo) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/edit-organization-info"
            body: "*"
        };
    }

    rpc EstablishOrganization(ApiEstablishOrganization) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/establish-organization"
            body: "*"
        };
    }

    rpc UpdateParent(ApiUpdateParent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/update-parent"
            body: "*"
        };
    }

    rpc UpdateOrganizationStatus(ApiOrganizationStatusUpdated) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/organization/{org_id}/update-organization-status"
            body: "*"
        };
    }
}
