syntax = "proto3";


package com.improving.event;

import "com/improving/event/api/event_api.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "kalix/annotations.proto";

service EventService {

    option (kalix.codegen) = {
        event_sourced_entity: {
            name: "com.improving.eventcontext.event.EventAPI"
            entity_type: "events"
            state: "com.improving.eventcontext.event.EventState"
            events: [
                "com.improving.eventcontext.EventInfoChanged",
                "com.improving.eventcontext.EventScheduled",
                "com.improving.eventcontext.EventCancelled",
                "com.improving.eventcontext.EventRescheduled",
                "com.improving.eventcontext.EventDelayed",
                "com.improving.eventcontext.EventStarted",
                "com.improving.eventcontext.EventEnded"]
        }
    };

    rpc ChangeEventInfo(ApiChangeEventInfo) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/change-event-info"
            body: "*"
        };
    }

    rpc ScheduleEvent(ApiScheduleEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/schedule-event"
            body: "*"
        };
    }

    rpc CancelEvent(ApiCancelEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/cancel-event"
            body: "*"
        };
    }

    rpc RescheduleEvent(ApiRescheduleEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/reschedule-event"
            body: "*"
        };
    }

    rpc DelayEvent(ApiDelayEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/delay-event"
            body: "*"
        };
    }

    rpc StartEvent(ApiStartEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/start-event"
            body: "*"
        };
    }

    rpc EndEvent(ApiEndEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/end-event"
            body: "*"
        };
    }

    rpc AddLiveUpdate(ApiAddLiveUpdate) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/add-live-update"
            body: "*"
        };
    }
}