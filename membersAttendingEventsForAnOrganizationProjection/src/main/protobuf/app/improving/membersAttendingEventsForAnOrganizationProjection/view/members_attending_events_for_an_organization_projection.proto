syntax = "proto3";

package app.improving.projections;

import "app/improving/event/domain/event_context_domain.proto";
import "app/improving/member/domain/member_context_domain.proto";
import "app/improving/member/domain/member_domain.proto";
import "app/improving/order/domain/order_context_domain.proto";
import "app/improving/product/domain/product_context_domain.proto";
import "common_domain.proto";
import "date.proto";
import "kalix/annotations.proto";

message FindMembersAtEventsOnDayForOrg {
    string org_id = 1;
    google.type.Date event_date = 2;
}

message NoEventsOnDayForOrg {
    string ord_id = 1;
}

message EventInfo {
    EventId event_id = 1;
    string event_name = 2;
    eventcontext.EventStatus status = 3;
}

message MemberEvents {
    MemberId attending_member_id = 1;
    repeated EventInfo event_infos = 2;
}

message MemberInfo {
    MemberId attending_member_id = 1;
    string attending_member_name = 2;
}

message MemberEventsOnDay {
    repeated MemberInfo member_infos = 1;
    repeated MemberEvents member_events = 2;
}

message MembersTableRow {
    MemberId attending_member_id = 1;
    string attending_member_name = 2;
    membercontext.MemberStatus status = 3;
}

message EventsTableRow {
    EventId event_id = 1;
    string event_name = 2;
    google.type.Date event_date = 3;
    eventcontext.EventStatus status = 4;
    OrganizationId event_org_id = 5;
}

message EventOrgCorrTableRow {
    EventId event_id = 1;
    OrganizationId event_org_id = 2;
}

message TicketEventCorrTableRow {
    ProductId ticket_sku = 1;
    EventId event_id = 2;
    productcontext.ProductStatus ticket_status = 3;
}

message OrderTableRow {
    OrderId order_id = 1;
    ordercontext.OrderStatus status = 2;
}

message TicketMemberCorrTableRow {
    ProductId ticket_sku = 1;
    MemberId attending_member_id = 2;
    OrderId order_id = 3;
}

service MembersAttendingEventsForAnOrganization {
    option (kalix.codegen) = {
        view: {}
    };
    rpc ProcessMemberRegistered(membercontext.MemberRegistered) returns (MembersTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "member"
        };
        option (kalix.method).view.update = {
            table: "members"
            transform_updates: true
        };
    }

    rpc ProcessMemberStatusUpdated(membercontext.MemberStatusUpdated) returns (MembersTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "member"
        };
        option (kalix.method).view.update = {
            table: "members"
            transform_updates: true
        };
    }

    rpc ProcessEventScheduledForCorrTable(eventcontext.EventScheduled) returns (EventOrgCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "event"
        };
        option (kalix.method).view.update = {
            table: "event_org_corr"
            transform_updates: true
        };
    }

    rpc ProcessEventCancelledForCorrTable(eventcontext.EventScheduled) returns (EventOrgCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "event"
        };
        option (kalix.method).view.update = {
            table: "event_org_corr"
            transform_updates: true
        };
    }

    rpc ProcessEventScheduledForEventsTable(eventcontext.EventScheduled) returns (EventsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "event"
        };
        option (kalix.method).view.update = {
            table: "events"
            transform_updates: true
        };
    }

    rpc ProcessEventStartedForEventsTable(eventcontext.EventStarted) returns (EventsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "event"
        };
        option (kalix.method).view.update = {
            table: "events"
            transform_updates: true
        };
    }

    rpc ProcessEventRescheduled(eventcontext.EventRescheduled) returns (EventsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "event"
        };
        option (kalix.method).view.update = {
            table: "events"
            transform_updates: true
        };
    }

    rpc ProcessEventDelayed(eventcontext.EventDelayed) returns (EventsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "event"
        };
        option (kalix.method).view.update = {
            table: "events"
            transform_updates: true
        };
    }

    rpc ProcessEventEnded(eventcontext.EventEnded) returns (EventsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "event"
        };
        option (kalix.method).view.update = {
            table: "events"
            transform_updates: true
        };
    }

    rpc ProcessEventCancelledForEventsTable(eventcontext.EventCancelled) returns (EventsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "event"
        };
        option (kalix.method).view.update = {
            table: "events"
            transform_updates: true
        };
    }

    rpc ProcessProductCreated(productcontext.ProductCreated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "product"
        };
        option (kalix.method).view.update = {
            table: "ticket_event_corr"
            transform_updates: true
        };
    }

    rpc ProcessProductActivated(productcontext.ProductActivated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "order"
        };
        option (kalix.method).view.update = {
            table: "ticket_event_corr"
            transform_updates: true
        };
    }

    rpc ProcessProductInactivated(productcontext.ProductInactivated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "order"
        };
        option (kalix.method).view.update = {
            table: "ticket_event_corr"
            transform_updates: true
        };
    }

    rpc ProcessProductDeleted(productcontext.ProductDeleted) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "order"
        };
        option (kalix.method).view.update = {
            table: "ticket_event_corr"
            transform_updates: true
        };
    }

    rpc ProcessOrderCreated(ordercontext.OrderCreated) returns (OrderTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "order"
        };
        option (kalix.method).view.update = {
            table: "orders"
            transform_updates: true
        };
    }

    rpc ProcessOrderStatusUpdated(ordercontext.OrderStatusUpdated) returns (OrderTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "order"
        };
        option (kalix.method).view.update = {
            table: "orders"
            transform_updates: true
        };
    }

    rpc ProcessLineItemCreated(ordercontext.LineItemOrdered) returns (TicketMemberCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "order"
        };
        option (kalix.method).view.update = {
            table: "ticket_member_corr"
            transform_updates: true
        };
    }

    rpc ProcessLineItemCancelled(ordercontext.LineItemCancelled) returns (TicketMemberCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "order"
        };
        option (kalix.method).view.update = {
            table: "ticket_member_corr"
            transform_updates: true
        };
    }

    rpc ProcessFindMembersAtEventsOnDayForOrg(FindMembersAtEventsOnDayForOrg) returns (MemberEventsOnDay) {
        option (kalix.method).view.query = {
            query: "SELECT"
                    "collect(members.*) as member_infos, "
                    "collect(member.memberId, collect(events.*) as event_infos) as member_events"
                    "FROM event_org_corr"
                    "JOIN ticket_event_corr ON ticket_event_corr.event_id = event_org_corr.event_id"
                    "JOIN ticket_member_corr ON ticket_event_corr.ticket_sku = ticket_member_corr.ticket_sku"
                    "JOIN members ON ticket_member_corr.member_id = members.member_id"
                    "JOIN events ON ticket_event_corr.event_org_id = events.event_id"
                    "JOIN orders ON ticket_member_corr.order_id = orders.order_id"
                    "WHERE event_org_corr.event_org_id = :org_id"
                    "AND events.event_date = :event_date"
                    "AND (event.status = 'SCHEDULED' OR event.status = 'INPROGRESS')"
                    "AND members.status = 'ACTIVE'"
                    "AND ticket_event_corr.status = 'ACTIVE'"
                    "AND (orders.status = 'DELIVERED' OR orders.status = 'READY')"
                    "GROUP_BY member_id"
            transform_results: true
        };
    }
}
