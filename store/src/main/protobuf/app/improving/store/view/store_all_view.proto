syntax = "proto3";


package app.improving.storecontext;

import "app/improving/store/api/store_api.proto";
import "app/improving/store/domain/store_context_domain.proto";
import "common_api.proto";
import "kalix/annotations.proto";

message AllStoresRequest {}

message AllStoresResult {
    repeated store.ApiStore stores = 1;
}

service AllStoresView {
    option (kalix.codegen) = {
        view: {}
    };

    rpc ProcessStoreCreated(StoreCreated) returns (store.ApiStore) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "stores"
        };
        option (kalix.method).view.update = {
            table: "all_stores"
            transform_updates: true
        };
    }

    rpc ProcessStoreDeleted(StoreDeleted) returns (store.ApiStore) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "stores"
        };
        option (kalix.method).view.update = {
            table: "all_stores"
            transform_updates: true
        };
    }

    rpc ProcessStoreOpened(StoreOpened) returns (store.ApiStore) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "stores"
        };
        option (kalix.method).view.update = {
            table: "all_stores"
            transform_updates: true
        };
    }

    rpc ProcessStoreUpdated(StoreUpdated) returns (store.ApiStore) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "stores"
        };
        option (kalix.method).view.update = {
            table: "all_stores"
            transform_updates: true
        };
    }

    rpc ProcessStoreClosed(StoreClosed) returns (store.ApiStore) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "stores"
        };
        option (kalix.method).view.update = {
            table: "all_stores"
            transform_updates: true
        };
    }

    rpc ProcessProductsAddedToStore(ProductsAddedToStore) returns (store.ApiStore) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "stores"
        };
        option (kalix.method).view.update = {
            table: "all_stores"
            transform_updates: true
        };
    }

    rpc ProcessProductsRemovedFromStore(ProductsRemovedFromStore) returns (store.ApiStore) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "stores"
        };
        option (kalix.method).view.update = {
            table: "all_stores"
            transform_updates: true
        };
    }

    rpc ProcessStoreReleased(StoreReleased) returns (store.ApiStore) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "stores"
        };
        option (kalix.method).view.update = {
            table: "all_stores"
            transform_updates: true
        };
    }

    rpc GetAllStores(AllStoresRequest) returns (AllStoresResult) {
        option (kalix.method).view.query = {
            query: "SELECT * AS stores FROM all_stores LIMIT 100 "
        };
    }
}