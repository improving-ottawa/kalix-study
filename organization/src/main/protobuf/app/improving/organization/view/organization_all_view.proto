syntax = "proto3";


package app.improving.organizationcontext;


import "app/improving/organization/api/organization_api.proto";
import "app/improving/organization/domain/organization_context_domain.proto";
import "kalix/annotations.proto";

message AllOrganizationsRequest {}

message AllOrganizationsResult {
    repeated organization.ApiOrganization organizations = 1;
}

service AllOrganizationsView {
    option (kalix.codegen) = {
        view: {}
    };

    rpc ProcessOrganizationEstablished(OrganizationEstablished) returns (organizationcontext.organization.ApiOrganization) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "all_organizations"
            transform_updates: true
        };
    }

    rpc ProcessMembersAddedToOrganization(MembersAddedToOrganization) returns (organizationcontext.organization.ApiOrganization) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "all_organizations"
            transform_updates: true
        };
    }

    rpc ProcessMembersRemovedFromOrganization(MembersRemovedFromOrganization) returns (organizationcontext.organization.ApiOrganization) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "all_organizations"
            transform_updates: true
        };
    }

    rpc ProcessOrganizationAccountsUpdated(OrganizationAccountsUpdated) returns (organizationcontext.organization.ApiOrganization) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "all_organizations"
            transform_updates: true
        };
    }

    rpc ProcessOrganizationContactsUpdated(OrganizationContactsUpdated) returns (organizationcontext.organization.ApiOrganization) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "all_organizations"
            transform_updates: true
        };
    }

    rpc ProcessOrganizationInfoUpdated(OrganizationInfoUpdated) returns (organizationcontext.organization.ApiOrganization) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "all_organizations"
            transform_updates: true
        };
    }

    rpc ProcessOrganizationStatusUpdated(OrganizationStatusUpdated) returns (organizationcontext.organization.ApiOrganization) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "all_organizations"
            transform_updates: true
        };
    }

    rpc ProcessOwnersAddedToOrganization(OwnersAddedToOrganization) returns (organizationcontext.organization.ApiOrganization) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "all_organizations"
            transform_updates: true
        };
    }

    rpc ProcessOwnersRemovedFromOrganization(OwnersRemovedFromOrganization) returns (organizationcontext.organization.ApiOrganization) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "all_organizations"
            transform_updates: true
        };
    }

    rpc ProcessOrganizationReleased(OrganizationReleased) returns (organizationcontext.organization.ApiOrganization) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organizations"
        };
        option (kalix.method).view.update = {
            table: "all_organizations"
            transform_updates: true
        };
    }

    rpc GetAllOrganizations(AllOrganizationsRequest) returns (AllOrganizationsResult) {
        option (kalix.method).view.query = {
            query: "SELECT * as organizations FROM all_organizations LIMIT 999 "
        };
    }
}