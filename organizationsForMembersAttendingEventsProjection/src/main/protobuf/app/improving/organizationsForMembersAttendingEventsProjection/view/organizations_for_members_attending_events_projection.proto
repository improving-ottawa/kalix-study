syntax = "proto3";

package app.improving.projections;

import "app/improving/event/domain/event_context_domain.proto";
import "app/improving/member/domain/member_context_domain.proto";
import "app/improving/order/domain/order_context_domain.proto";
import "app/improving/organization/domain/organization_context_domain.proto";
import "app/improving/product/domain/product_context_domain.proto";
import "common_domain.proto";
import "common_views.proto";
import "kalix/annotations.proto";

message FindOrgsByMembersForEvents {
    repeated string event_id = 1;
}

message NoEventsOnDayForOrg {
    string ord_id = 1;
}

message OrgsByMembersForEvents {
    map<string, OrgMembers> org_members = 1;
    map<string, MemberEvents> member_events = 2;
}

message OrgsTableRow {
    OrganizationId attending_member_org_id = 1;
    string attending_member_org_name = 2;
}

message MembersTableRow {
    MemberId attending_member_id = 1;
    string attending_member_name = 2;
}

message OrgMemberCorrTableRow {
    OrganizationId attending_member_org_id = 1;
    MemberId attending_member_id = 2;
}

message EventsTableRow {
    EventId event_id = 1;
    string event_name = 2;
}

message TicketEventCorrTableRow {
    ProductId ticket_sku = 1;
    EventId event_id = 2;
}

message TicketMemberCorrTableRow {
    ProductId ticket_sku = 1;
    MemberId attending_member_id = 2;
}

service OrganizationsForMembersAttendingEventsView {
    option (kalix.codegen) = {
        view: {}
    };
    rpc ProcessOrganizationEstablished(organizationcontext.OrganizationEstablished) returns (OrgsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "organization"
        };
        option (kalix.method).view.update = {
            table: "organizations"
            transform_updates: true
        };
    }

    rpc ProcessMemberRegistered(membercontext.MemberRegistered) returns (MembersTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "member"
        };
        option (kalix.method).view.update = {
            table: "members"
            transform_updates: true
        };
    }

    rpc ProcessMemberRegisteredOrganization(membercontext.MemberRegistered) returns (OrgMemberCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "member"
        };
        option (kalix.method).view.update = {
            table: "org_member_corr"
            transform_updates: true
        };
    }

    rpc ProcessEventScheduled(eventcontext.EventScheduled) returns (EventsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "event"
        };
        option (kalix.method).view.update = {
            table: "events"
            transform_updates: true
        };
    }

    rpc ProcessEventCancelled(eventcontext.EventCancelled) returns (EventsTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "event"
        };
        option (kalix.method).view.update = {
            table: "events"
            transform_updates: true
        };
    }

    rpc ProcessProductCreatedForCorrTable(productcontext.ProductCreated) returns (TicketEventCorrTableRow) {
        option (kalix.method).view.update = {
            table: "ticket_event_corr"
            transform_updates: true
        };
    }

//    rpc ProcessOrderCreatedForCorrTable(ordercontext.OrderCreated) returns (TicketMemberCorrTableRow) {
//        option (kalix.method).view.update = {
//            table: "ticket_member_corr"
//            transform_updates: true
//        };
//    }
//
//    rpc ProcessFindOrgsByMembersForEvents(FindOrgsByMembersForEvents) returns (OrgsByMembersForEvents) {
//        option (kalix.method).view.query = {
//            query: "SELECT "
//                    "* "
//                    "FROM ticket_event_corr"
//                    "JOIN ticket_member_corr ON ticket_event_corr.ticketSKU = ticket_member_corr.ticketSKU"
//                    "JOIN org_member_corr ON ticket_member_corr.attendingMember = org_member_corr.attendingMember"
//                    "JOIN organizations ON org_member_corr.attendingMemberOrg = organizations.attendingMemberOrg"
//                    "JOIN members ON org_member_corr.attendingMember = members.attendingMember"
//                    "WHERE ticket_event_corr.event = :eventId"
//            transform_results: true
//        };
//    }
}
