// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package kalix

/** A principal matcher that can be used in an ACL.
  *
  * A principal is a very broad concept. It can correlate to a person, a system, or a more abstract concept, such as
  * the internet.
  *
  * A single request may have multiple principals associated with it, for example, it may have come from a particular
  * source system, and it may have certain credentials associated with it. When a matcher is applied to the request,
  * the request is considered to match if at least one of the principals attached to the request matches.
  */
@SerialVersionUID(0L)
final case class PrincipalMatcher(
    matcher: kalix.PrincipalMatcher.Matcher = kalix.PrincipalMatcher.Matcher.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PrincipalMatcher] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (matcher.principal.isDefined) {
        val __value = matcher.principal.get.value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
      };
      if (matcher.service.isDefined) {
        val __value = matcher.service.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      matcher.principal.foreach { __v =>
        val __m = __v.value
        _output__.writeEnum(1, __m)
      };
      matcher.service.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getPrincipal: kalix.PrincipalMatcher.Principal = matcher.principal.getOrElse(kalix.PrincipalMatcher.Principal.UNSPECIFIED)
    def withPrincipal(__v: kalix.PrincipalMatcher.Principal): PrincipalMatcher = copy(matcher = kalix.PrincipalMatcher.Matcher.Principal(__v))
    def getService: _root_.scala.Predef.String = matcher.service.getOrElse("")
    def withService(__v: _root_.scala.Predef.String): PrincipalMatcher = copy(matcher = kalix.PrincipalMatcher.Matcher.Service(__v))
    def clearMatcher: PrincipalMatcher = copy(matcher = kalix.PrincipalMatcher.Matcher.Empty)
    def withMatcher(__v: kalix.PrincipalMatcher.Matcher): PrincipalMatcher = copy(matcher = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => matcher.principal.map(_.javaValueDescriptor).orNull
        case 2 => matcher.service.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => matcher.principal.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => matcher.service.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: kalix.PrincipalMatcher.type = kalix.PrincipalMatcher
    // @@protoc_insertion_point(GeneratedMessage[kalix.PrincipalMatcher])
}

object PrincipalMatcher extends scalapb.GeneratedMessageCompanion[kalix.PrincipalMatcher] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[kalix.PrincipalMatcher] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): kalix.PrincipalMatcher = {
    var __matcher: kalix.PrincipalMatcher.Matcher = kalix.PrincipalMatcher.Matcher.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __matcher = kalix.PrincipalMatcher.Matcher.Principal(kalix.PrincipalMatcher.Principal.fromValue(_input__.readEnum()))
        case 18 =>
          __matcher = kalix.PrincipalMatcher.Matcher.Service(_input__.readStringRequireUtf8())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    kalix.PrincipalMatcher(
        matcher = __matcher,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[kalix.PrincipalMatcher] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      kalix.PrincipalMatcher(
        matcher = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => kalix.PrincipalMatcher.Matcher.Principal(kalix.PrincipalMatcher.Principal.fromValue(__e.number)))
            .orElse[kalix.PrincipalMatcher.Matcher](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(kalix.PrincipalMatcher.Matcher.Service(_)))
            .getOrElse(kalix.PrincipalMatcher.Matcher.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AclProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AclProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => kalix.PrincipalMatcher.Principal
    }
  }
  lazy val defaultInstance = kalix.PrincipalMatcher(
    matcher = kalix.PrincipalMatcher.Matcher.Empty
  )
  /** This enum contains principal matchers that don't have any configuration, such as a name, associated with them,
    * for ease of reference in annotations.
    */
  sealed abstract class Principal(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = Principal
    def isUnspecified: _root_.scala.Boolean = false
    def isAll: _root_.scala.Boolean = false
    def isInternet: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Principal] = kalix.PrincipalMatcher.Principal
    final def asRecognized: _root_.scala.Option[kalix.PrincipalMatcher.Principal.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[kalix.PrincipalMatcher.Principal.Recognized])
  }
  
  object Principal extends _root_.scalapb.GeneratedEnumCompanion[Principal] {
    sealed trait Recognized extends Principal
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Principal] = this
    
    @SerialVersionUID(0L)
    case object UNSPECIFIED extends Principal(0) with Principal.Recognized {
      val index = 0
      val name = "UNSPECIFIED"
      override def isUnspecified: _root_.scala.Boolean = true
    }
    
    /** All (or no) principals. This matches all requests regardless of what principals are associated with it.
      */
    @SerialVersionUID(0L)
    case object ALL extends Principal(1) with Principal.Recognized {
      val index = 1
      val name = "ALL"
      override def isAll: _root_.scala.Boolean = true
    }
    
    /** The internet.
      *
      * This will match all requests that originated from the internet, and passed through the Kalix ingress via a
      * configured route.
      */
    @SerialVersionUID(0L)
    case object INTERNET extends Principal(2) with Principal.Recognized {
      val index = 2
      val name = "INTERNET"
      override def isInternet: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Principal(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values = scala.collection.immutable.Seq(UNSPECIFIED, ALL, INTERNET)
    def fromValue(__value: _root_.scala.Int): Principal = __value match {
      case 0 => UNSPECIFIED
      case 1 => ALL
      case 2 => INTERNET
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = kalix.PrincipalMatcher.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = kalix.PrincipalMatcher.scalaDescriptor.enums(0)
  }
  sealed trait Matcher extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isPrincipal: _root_.scala.Boolean = false
    def isService: _root_.scala.Boolean = false
    def principal: _root_.scala.Option[kalix.PrincipalMatcher.Principal] = _root_.scala.None
    def service: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
  }
  object Matcher {
    @SerialVersionUID(0L)
    case object Empty extends kalix.PrincipalMatcher.Matcher {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Principal(value: kalix.PrincipalMatcher.Principal) extends kalix.PrincipalMatcher.Matcher {
      type ValueType = kalix.PrincipalMatcher.Principal
      override def isPrincipal: _root_.scala.Boolean = true
      override def principal: _root_.scala.Option[kalix.PrincipalMatcher.Principal] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Service(value: _root_.scala.Predef.String) extends kalix.PrincipalMatcher.Matcher {
      type ValueType = _root_.scala.Predef.String
      override def isService: _root_.scala.Boolean = true
      override def service: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class PrincipalMatcherLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, kalix.PrincipalMatcher]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, kalix.PrincipalMatcher](_l) {
    def principal: _root_.scalapb.lenses.Lens[UpperPB, kalix.PrincipalMatcher.Principal] = field(_.getPrincipal)((c_, f_) => c_.copy(matcher = kalix.PrincipalMatcher.Matcher.Principal(f_)))
    def service: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getService)((c_, f_) => c_.copy(matcher = kalix.PrincipalMatcher.Matcher.Service(f_)))
    def matcher: _root_.scalapb.lenses.Lens[UpperPB, kalix.PrincipalMatcher.Matcher] = field(_.matcher)((c_, f_) => c_.copy(matcher = f_))
  }
  final val PRINCIPAL_FIELD_NUMBER = 1
  final val SERVICE_FIELD_NUMBER = 2
  def of(
    matcher: kalix.PrincipalMatcher.Matcher
  ): _root_.kalix.PrincipalMatcher = _root_.kalix.PrincipalMatcher(
    matcher
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[kalix.PrincipalMatcher])
}
