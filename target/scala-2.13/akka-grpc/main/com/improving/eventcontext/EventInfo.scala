// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.improving.eventcontext

/** @param eventURL
  *   URL type?
  * @param geoLocation
  *   Location?
  */
@SerialVersionUID(0L)
final case class EventInfo(
    eventName: _root_.scala.Predef.String = "",
    description: _root_.scala.Predef.String = "",
    eventURL: _root_.scala.Predef.String = "",
    sponsoringOrg: _root_.scala.Option[com.improving.OrganizationId] = _root_.scala.None,
    geoLocation: _root_.scala.Predef.String = "",
    reservation: _root_.scala.Option[com.improving.eventcontext.ReservationId] = _root_.scala.None,
    expectedStart: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    expectedEnd: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    isPrivate: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[EventInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = eventName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = description
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = eventURL
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      if (sponsoringOrg.isDefined) {
        val __value = sponsoringOrg.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = geoLocation
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      if (reservation.isDefined) {
        val __value = reservation.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (expectedStart.isDefined) {
        val __value = expectedStart.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (expectedEnd.isDefined) {
        val __value = expectedEnd.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = isPrivate
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(9, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = eventName
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = description
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = eventURL
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      sponsoringOrg.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = geoLocation
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      reservation.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      expectedStart.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      expectedEnd.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = isPrivate
        if (__v != false) {
          _output__.writeBool(9, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withEventName(__v: _root_.scala.Predef.String): EventInfo = copy(eventName = __v)
    def withDescription(__v: _root_.scala.Predef.String): EventInfo = copy(description = __v)
    def withEventURL(__v: _root_.scala.Predef.String): EventInfo = copy(eventURL = __v)
    def getSponsoringOrg: com.improving.OrganizationId = sponsoringOrg.getOrElse(com.improving.OrganizationId.defaultInstance)
    def clearSponsoringOrg: EventInfo = copy(sponsoringOrg = _root_.scala.None)
    def withSponsoringOrg(__v: com.improving.OrganizationId): EventInfo = copy(sponsoringOrg = Option(__v))
    def withGeoLocation(__v: _root_.scala.Predef.String): EventInfo = copy(geoLocation = __v)
    def getReservation: com.improving.eventcontext.ReservationId = reservation.getOrElse(com.improving.eventcontext.ReservationId.defaultInstance)
    def clearReservation: EventInfo = copy(reservation = _root_.scala.None)
    def withReservation(__v: com.improving.eventcontext.ReservationId): EventInfo = copy(reservation = Option(__v))
    def getExpectedStart: com.google.protobuf.timestamp.Timestamp = expectedStart.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearExpectedStart: EventInfo = copy(expectedStart = _root_.scala.None)
    def withExpectedStart(__v: com.google.protobuf.timestamp.Timestamp): EventInfo = copy(expectedStart = Option(__v))
    def getExpectedEnd: com.google.protobuf.timestamp.Timestamp = expectedEnd.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearExpectedEnd: EventInfo = copy(expectedEnd = _root_.scala.None)
    def withExpectedEnd(__v: com.google.protobuf.timestamp.Timestamp): EventInfo = copy(expectedEnd = Option(__v))
    def withIsPrivate(__v: _root_.scala.Boolean): EventInfo = copy(isPrivate = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = eventName
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = description
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = eventURL
          if (__t != "") __t else null
        }
        case 4 => sponsoringOrg.orNull
        case 5 => {
          val __t = geoLocation
          if (__t != "") __t else null
        }
        case 6 => reservation.orNull
        case 7 => expectedStart.orNull
        case 8 => expectedEnd.orNull
        case 9 => {
          val __t = isPrivate
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(eventName)
        case 2 => _root_.scalapb.descriptors.PString(description)
        case 3 => _root_.scalapb.descriptors.PString(eventURL)
        case 4 => sponsoringOrg.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PString(geoLocation)
        case 6 => reservation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => expectedStart.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => expectedEnd.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PBoolean(isPrivate)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.improving.eventcontext.EventInfo.type = com.improving.eventcontext.EventInfo
    // @@protoc_insertion_point(GeneratedMessage[com.improving.eventcontext.EventInfo])
}

object EventInfo extends scalapb.GeneratedMessageCompanion[com.improving.eventcontext.EventInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.improving.eventcontext.EventInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.improving.eventcontext.EventInfo = {
    var __eventName: _root_.scala.Predef.String = ""
    var __description: _root_.scala.Predef.String = ""
    var __eventURL: _root_.scala.Predef.String = ""
    var __sponsoringOrg: _root_.scala.Option[com.improving.OrganizationId] = _root_.scala.None
    var __geoLocation: _root_.scala.Predef.String = ""
    var __reservation: _root_.scala.Option[com.improving.eventcontext.ReservationId] = _root_.scala.None
    var __expectedStart: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var __expectedEnd: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var __isPrivate: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __eventName = _input__.readStringRequireUtf8()
        case 18 =>
          __description = _input__.readStringRequireUtf8()
        case 26 =>
          __eventURL = _input__.readStringRequireUtf8()
        case 34 =>
          __sponsoringOrg = Option(__sponsoringOrg.fold(_root_.scalapb.LiteParser.readMessage[com.improving.OrganizationId](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __geoLocation = _input__.readStringRequireUtf8()
        case 50 =>
          __reservation = Option(__reservation.fold(_root_.scalapb.LiteParser.readMessage[com.improving.eventcontext.ReservationId](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __expectedStart = Option(__expectedStart.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __expectedEnd = Option(__expectedEnd.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 72 =>
          __isPrivate = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.improving.eventcontext.EventInfo(
        eventName = __eventName,
        description = __description,
        eventURL = __eventURL,
        sponsoringOrg = __sponsoringOrg,
        geoLocation = __geoLocation,
        reservation = __reservation,
        expectedStart = __expectedStart,
        expectedEnd = __expectedEnd,
        isPrivate = __isPrivate,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.improving.eventcontext.EventInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.improving.eventcontext.EventInfo(
        eventName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        description = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        eventURL = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        sponsoringOrg = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.improving.OrganizationId]]),
        geoLocation = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        reservation = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[com.improving.eventcontext.ReservationId]]),
        expectedStart = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
        expectedEnd = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
        isPrivate = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventContextDomainProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventContextDomainProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = com.improving.OrganizationId
      case 6 => __out = com.improving.eventcontext.ReservationId
      case 7 => __out = com.google.protobuf.timestamp.Timestamp
      case 8 => __out = com.google.protobuf.timestamp.Timestamp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.improving.eventcontext.EventInfo(
    eventName = "",
    description = "",
    eventURL = "",
    sponsoringOrg = _root_.scala.None,
    geoLocation = "",
    reservation = _root_.scala.None,
    expectedStart = _root_.scala.None,
    expectedEnd = _root_.scala.None,
    isPrivate = false
  )
  implicit class EventInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.improving.eventcontext.EventInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.improving.eventcontext.EventInfo](_l) {
    def eventName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.eventName)((c_, f_) => c_.copy(eventName = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def eventURL: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.eventURL)((c_, f_) => c_.copy(eventURL = f_))
    def sponsoringOrg: _root_.scalapb.lenses.Lens[UpperPB, com.improving.OrganizationId] = field(_.getSponsoringOrg)((c_, f_) => c_.copy(sponsoringOrg = Option(f_)))
    def optionalSponsoringOrg: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.OrganizationId]] = field(_.sponsoringOrg)((c_, f_) => c_.copy(sponsoringOrg = f_))
    def geoLocation: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.geoLocation)((c_, f_) => c_.copy(geoLocation = f_))
    def reservation: _root_.scalapb.lenses.Lens[UpperPB, com.improving.eventcontext.ReservationId] = field(_.getReservation)((c_, f_) => c_.copy(reservation = Option(f_)))
    def optionalReservation: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.eventcontext.ReservationId]] = field(_.reservation)((c_, f_) => c_.copy(reservation = f_))
    def expectedStart: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getExpectedStart)((c_, f_) => c_.copy(expectedStart = Option(f_)))
    def optionalExpectedStart: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.expectedStart)((c_, f_) => c_.copy(expectedStart = f_))
    def expectedEnd: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getExpectedEnd)((c_, f_) => c_.copy(expectedEnd = Option(f_)))
    def optionalExpectedEnd: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.expectedEnd)((c_, f_) => c_.copy(expectedEnd = f_))
    def isPrivate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isPrivate)((c_, f_) => c_.copy(isPrivate = f_))
  }
  final val EVENTNAME_FIELD_NUMBER = 1
  final val DESCRIPTION_FIELD_NUMBER = 2
  final val EVENTURL_FIELD_NUMBER = 3
  final val SPONSORINGORG_FIELD_NUMBER = 4
  final val GEOLOCATION_FIELD_NUMBER = 5
  final val RESERVATION_FIELD_NUMBER = 6
  final val EXPECTEDSTART_FIELD_NUMBER = 7
  final val EXPECTEDEND_FIELD_NUMBER = 8
  final val ISPRIVATE_FIELD_NUMBER = 9
  def of(
    eventName: _root_.scala.Predef.String,
    description: _root_.scala.Predef.String,
    eventURL: _root_.scala.Predef.String,
    sponsoringOrg: _root_.scala.Option[com.improving.OrganizationId],
    geoLocation: _root_.scala.Predef.String,
    reservation: _root_.scala.Option[com.improving.eventcontext.ReservationId],
    expectedStart: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp],
    expectedEnd: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp],
    isPrivate: _root_.scala.Boolean
  ): _root_.com.improving.eventcontext.EventInfo = _root_.com.improving.eventcontext.EventInfo(
    eventName,
    description,
    eventURL,
    sponsoringOrg,
    geoLocation,
    reservation,
    expectedStart,
    expectedEnd,
    isPrivate
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[com.improving.eventcontext.EventInfo])
}
