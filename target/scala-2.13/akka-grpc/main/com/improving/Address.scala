// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.improving

@SerialVersionUID(0L)
final case class Address(
    line1: _root_.scala.Predef.String = "",
    line2: _root_.scala.Predef.String = "",
    city: _root_.scala.Predef.String = "",
    stateProvince: _root_.scala.Predef.String = "",
    country: _root_.scala.Predef.String = "",
    postalCode: com.improving.Address.PostalCode = com.improving.Address.PostalCode.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Address] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = line1
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = line2
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = city
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = stateProvince
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = country
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      if (postalCode.usPostalCode.isDefined) {
        val __value = postalCode.usPostalCode.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (postalCode.caPostalCode.isDefined) {
        val __value = postalCode.caPostalCode.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = line1
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = line2
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = city
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = stateProvince
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = country
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      postalCode.usPostalCode.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      postalCode.caPostalCode.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withLine1(__v: _root_.scala.Predef.String): Address = copy(line1 = __v)
    def withLine2(__v: _root_.scala.Predef.String): Address = copy(line2 = __v)
    def withCity(__v: _root_.scala.Predef.String): Address = copy(city = __v)
    def withStateProvince(__v: _root_.scala.Predef.String): Address = copy(stateProvince = __v)
    def withCountry(__v: _root_.scala.Predef.String): Address = copy(country = __v)
    def getUsPostalCode: com.improving.USPostalCode = postalCode.usPostalCode.getOrElse(com.improving.USPostalCode.defaultInstance)
    def withUsPostalCode(__v: com.improving.USPostalCode): Address = copy(postalCode = com.improving.Address.PostalCode.UsPostalCode(__v))
    def getCaPostalCode: com.improving.CAPostalCode = postalCode.caPostalCode.getOrElse(com.improving.CAPostalCode.defaultInstance)
    def withCaPostalCode(__v: com.improving.CAPostalCode): Address = copy(postalCode = com.improving.Address.PostalCode.CaPostalCode(__v))
    def clearPostalCode: Address = copy(postalCode = com.improving.Address.PostalCode.Empty)
    def withPostalCode(__v: com.improving.Address.PostalCode): Address = copy(postalCode = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = line1
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = line2
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = city
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = stateProvince
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = country
          if (__t != "") __t else null
        }
        case 6 => postalCode.usPostalCode.orNull
        case 7 => postalCode.caPostalCode.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(line1)
        case 2 => _root_.scalapb.descriptors.PString(line2)
        case 3 => _root_.scalapb.descriptors.PString(city)
        case 4 => _root_.scalapb.descriptors.PString(stateProvince)
        case 5 => _root_.scalapb.descriptors.PString(country)
        case 6 => postalCode.usPostalCode.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => postalCode.caPostalCode.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.improving.Address.type = com.improving.Address
    // @@protoc_insertion_point(GeneratedMessage[com.improving.Address])
}

object Address extends scalapb.GeneratedMessageCompanion[com.improving.Address] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.improving.Address] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.improving.Address = {
    var __line1: _root_.scala.Predef.String = ""
    var __line2: _root_.scala.Predef.String = ""
    var __city: _root_.scala.Predef.String = ""
    var __stateProvince: _root_.scala.Predef.String = ""
    var __country: _root_.scala.Predef.String = ""
    var __postalCode: com.improving.Address.PostalCode = com.improving.Address.PostalCode.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __line1 = _input__.readStringRequireUtf8()
        case 18 =>
          __line2 = _input__.readStringRequireUtf8()
        case 26 =>
          __city = _input__.readStringRequireUtf8()
        case 34 =>
          __stateProvince = _input__.readStringRequireUtf8()
        case 42 =>
          __country = _input__.readStringRequireUtf8()
        case 50 =>
          __postalCode = com.improving.Address.PostalCode.UsPostalCode(__postalCode.usPostalCode.fold(_root_.scalapb.LiteParser.readMessage[com.improving.USPostalCode](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __postalCode = com.improving.Address.PostalCode.CaPostalCode(__postalCode.caPostalCode.fold(_root_.scalapb.LiteParser.readMessage[com.improving.CAPostalCode](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.improving.Address(
        line1 = __line1,
        line2 = __line2,
        city = __city,
        stateProvince = __stateProvince,
        country = __country,
        postalCode = __postalCode,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.improving.Address] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.improving.Address(
        line1 = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        line2 = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        city = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        stateProvince = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        country = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        postalCode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[com.improving.USPostalCode]]).map(com.improving.Address.PostalCode.UsPostalCode(_))
            .orElse[com.improving.Address.PostalCode](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.improving.CAPostalCode]]).map(com.improving.Address.PostalCode.CaPostalCode(_)))
            .getOrElse(com.improving.Address.PostalCode.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CommonDomainProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CommonDomainProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 6 => __out = com.improving.USPostalCode
      case 7 => __out = com.improving.CAPostalCode
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.improving.Address(
    line1 = "",
    line2 = "",
    city = "",
    stateProvince = "",
    country = "",
    postalCode = com.improving.Address.PostalCode.Empty
  )
  sealed trait PostalCode extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isUsPostalCode: _root_.scala.Boolean = false
    def isCaPostalCode: _root_.scala.Boolean = false
    def usPostalCode: _root_.scala.Option[com.improving.USPostalCode] = _root_.scala.None
    def caPostalCode: _root_.scala.Option[com.improving.CAPostalCode] = _root_.scala.None
  }
  object PostalCode {
    @SerialVersionUID(0L)
    case object Empty extends com.improving.Address.PostalCode {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class UsPostalCode(value: com.improving.USPostalCode) extends com.improving.Address.PostalCode {
      type ValueType = com.improving.USPostalCode
      override def isUsPostalCode: _root_.scala.Boolean = true
      override def usPostalCode: _root_.scala.Option[com.improving.USPostalCode] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class CaPostalCode(value: com.improving.CAPostalCode) extends com.improving.Address.PostalCode {
      type ValueType = com.improving.CAPostalCode
      override def isCaPostalCode: _root_.scala.Boolean = true
      override def caPostalCode: _root_.scala.Option[com.improving.CAPostalCode] = Some(value)
      override def number: _root_.scala.Int = 7
    }
  }
  implicit class AddressLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.improving.Address]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.improving.Address](_l) {
    def line1: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.line1)((c_, f_) => c_.copy(line1 = f_))
    def line2: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.line2)((c_, f_) => c_.copy(line2 = f_))
    def city: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.city)((c_, f_) => c_.copy(city = f_))
    def stateProvince: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.stateProvince)((c_, f_) => c_.copy(stateProvince = f_))
    def country: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.country)((c_, f_) => c_.copy(country = f_))
    def usPostalCode: _root_.scalapb.lenses.Lens[UpperPB, com.improving.USPostalCode] = field(_.getUsPostalCode)((c_, f_) => c_.copy(postalCode = com.improving.Address.PostalCode.UsPostalCode(f_)))
    def caPostalCode: _root_.scalapb.lenses.Lens[UpperPB, com.improving.CAPostalCode] = field(_.getCaPostalCode)((c_, f_) => c_.copy(postalCode = com.improving.Address.PostalCode.CaPostalCode(f_)))
    def postalCode: _root_.scalapb.lenses.Lens[UpperPB, com.improving.Address.PostalCode] = field(_.postalCode)((c_, f_) => c_.copy(postalCode = f_))
  }
  final val LINE1_FIELD_NUMBER = 1
  final val LINE2_FIELD_NUMBER = 2
  final val CITY_FIELD_NUMBER = 3
  final val STATEPROVINCE_FIELD_NUMBER = 4
  final val COUNTRY_FIELD_NUMBER = 5
  final val US_POSTAL_CODE_FIELD_NUMBER = 6
  final val CA_POSTAL_CODE_FIELD_NUMBER = 7
  def of(
    line1: _root_.scala.Predef.String,
    line2: _root_.scala.Predef.String,
    city: _root_.scala.Predef.String,
    stateProvince: _root_.scala.Predef.String,
    country: _root_.scala.Predef.String,
    postalCode: com.improving.Address.PostalCode
  ): _root_.com.improving.Address = _root_.com.improving.Address(
    line1,
    line2,
    city,
    stateProvince,
    country,
    postalCode
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[com.improving.Address])
}
