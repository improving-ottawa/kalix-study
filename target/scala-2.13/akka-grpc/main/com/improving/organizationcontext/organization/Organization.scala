// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.improving.organizationcontext.organization

@SerialVersionUID(0L)
final case class Organization(
    oid: _root_.scala.Option[com.improving.OrganizationId] = _root_.scala.None,
    info: _root_.scala.Option[com.improving.organizationcontext.Info] = _root_.scala.None,
    parent: _root_.scala.Option[com.improving.OrganizationId] = _root_.scala.None,
    members: _root_.scala.Seq[com.improving.MemberId] = _root_.scala.Seq.empty,
    owners: _root_.scala.Seq[com.improving.MemberId] = _root_.scala.Seq.empty,
    contacts: _root_.scala.Seq[com.improving.organizationcontext.Contacts] = _root_.scala.Seq.empty,
    orgMeta: _root_.scala.Option[com.improving.organizationcontext.MetaInfo] = _root_.scala.None,
    name: _root_.scala.Predef.String = "",
    status: com.improving.organizationcontext.organization.OrganizationStatus = com.improving.organizationcontext.organization.OrganizationStatus.Draft,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Organization] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (oid.isDefined) {
        val __value = oid.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (info.isDefined) {
        val __value = info.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (parent.isDefined) {
        val __value = parent.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      members.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      owners.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      contacts.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (orgMeta.isDefined) {
        val __value = orgMeta.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      
      {
        val __value = status.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(9, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      oid.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      info.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      parent.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      members.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      owners.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      contacts.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      orgMeta.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = status.value
        if (__v != 0) {
          _output__.writeEnum(9, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getOid: com.improving.OrganizationId = oid.getOrElse(com.improving.OrganizationId.defaultInstance)
    def clearOid: Organization = copy(oid = _root_.scala.None)
    def withOid(__v: com.improving.OrganizationId): Organization = copy(oid = Option(__v))
    def getInfo: com.improving.organizationcontext.Info = info.getOrElse(com.improving.organizationcontext.Info.defaultInstance)
    def clearInfo: Organization = copy(info = _root_.scala.None)
    def withInfo(__v: com.improving.organizationcontext.Info): Organization = copy(info = Option(__v))
    def getParent: com.improving.OrganizationId = parent.getOrElse(com.improving.OrganizationId.defaultInstance)
    def clearParent: Organization = copy(parent = _root_.scala.None)
    def withParent(__v: com.improving.OrganizationId): Organization = copy(parent = Option(__v))
    def clearMembers = copy(members = _root_.scala.Seq.empty)
    def addMembers(__vs: com.improving.MemberId *): Organization = addAllMembers(__vs)
    def addAllMembers(__vs: Iterable[com.improving.MemberId]): Organization = copy(members = members ++ __vs)
    def withMembers(__v: _root_.scala.Seq[com.improving.MemberId]): Organization = copy(members = __v)
    def clearOwners = copy(owners = _root_.scala.Seq.empty)
    def addOwners(__vs: com.improving.MemberId *): Organization = addAllOwners(__vs)
    def addAllOwners(__vs: Iterable[com.improving.MemberId]): Organization = copy(owners = owners ++ __vs)
    def withOwners(__v: _root_.scala.Seq[com.improving.MemberId]): Organization = copy(owners = __v)
    def clearContacts = copy(contacts = _root_.scala.Seq.empty)
    def addContacts(__vs: com.improving.organizationcontext.Contacts *): Organization = addAllContacts(__vs)
    def addAllContacts(__vs: Iterable[com.improving.organizationcontext.Contacts]): Organization = copy(contacts = contacts ++ __vs)
    def withContacts(__v: _root_.scala.Seq[com.improving.organizationcontext.Contacts]): Organization = copy(contacts = __v)
    def getOrgMeta: com.improving.organizationcontext.MetaInfo = orgMeta.getOrElse(com.improving.organizationcontext.MetaInfo.defaultInstance)
    def clearOrgMeta: Organization = copy(orgMeta = _root_.scala.None)
    def withOrgMeta(__v: com.improving.organizationcontext.MetaInfo): Organization = copy(orgMeta = Option(__v))
    def withName(__v: _root_.scala.Predef.String): Organization = copy(name = __v)
    def withStatus(__v: com.improving.organizationcontext.organization.OrganizationStatus): Organization = copy(status = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => oid.orNull
        case 2 => info.orNull
        case 3 => parent.orNull
        case 4 => members
        case 5 => owners
        case 6 => contacts
        case 7 => orgMeta.orNull
        case 8 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = status.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => oid.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => info.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => parent.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(members.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(owners.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(contacts.iterator.map(_.toPMessage).toVector)
        case 7 => orgMeta.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => _root_.scalapb.descriptors.PString(name)
        case 9 => _root_.scalapb.descriptors.PEnum(status.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.improving.organizationcontext.organization.Organization.type = com.improving.organizationcontext.organization.Organization
    // @@protoc_insertion_point(GeneratedMessage[com.improving.organizationcontext.organization.Organization])
}

object Organization extends scalapb.GeneratedMessageCompanion[com.improving.organizationcontext.organization.Organization] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.improving.organizationcontext.organization.Organization] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.improving.organizationcontext.organization.Organization = {
    var __oid: _root_.scala.Option[com.improving.OrganizationId] = _root_.scala.None
    var __info: _root_.scala.Option[com.improving.organizationcontext.Info] = _root_.scala.None
    var __parent: _root_.scala.Option[com.improving.OrganizationId] = _root_.scala.None
    val __members: _root_.scala.collection.immutable.VectorBuilder[com.improving.MemberId] = new _root_.scala.collection.immutable.VectorBuilder[com.improving.MemberId]
    val __owners: _root_.scala.collection.immutable.VectorBuilder[com.improving.MemberId] = new _root_.scala.collection.immutable.VectorBuilder[com.improving.MemberId]
    val __contacts: _root_.scala.collection.immutable.VectorBuilder[com.improving.organizationcontext.Contacts] = new _root_.scala.collection.immutable.VectorBuilder[com.improving.organizationcontext.Contacts]
    var __orgMeta: _root_.scala.Option[com.improving.organizationcontext.MetaInfo] = _root_.scala.None
    var __name: _root_.scala.Predef.String = ""
    var __status: com.improving.organizationcontext.organization.OrganizationStatus = com.improving.organizationcontext.organization.OrganizationStatus.Draft
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __oid = Option(__oid.fold(_root_.scalapb.LiteParser.readMessage[com.improving.OrganizationId](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __info = Option(__info.fold(_root_.scalapb.LiteParser.readMessage[com.improving.organizationcontext.Info](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __parent = Option(__parent.fold(_root_.scalapb.LiteParser.readMessage[com.improving.OrganizationId](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __members += _root_.scalapb.LiteParser.readMessage[com.improving.MemberId](_input__)
        case 42 =>
          __owners += _root_.scalapb.LiteParser.readMessage[com.improving.MemberId](_input__)
        case 50 =>
          __contacts += _root_.scalapb.LiteParser.readMessage[com.improving.organizationcontext.Contacts](_input__)
        case 58 =>
          __orgMeta = Option(__orgMeta.fold(_root_.scalapb.LiteParser.readMessage[com.improving.organizationcontext.MetaInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __name = _input__.readStringRequireUtf8()
        case 72 =>
          __status = com.improving.organizationcontext.organization.OrganizationStatus.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.improving.organizationcontext.organization.Organization(
        oid = __oid,
        info = __info,
        parent = __parent,
        members = __members.result(),
        owners = __owners.result(),
        contacts = __contacts.result(),
        orgMeta = __orgMeta,
        name = __name,
        status = __status,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.improving.organizationcontext.organization.Organization] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.improving.organizationcontext.organization.Organization(
        oid = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.improving.OrganizationId]]),
        info = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.improving.organizationcontext.Info]]),
        parent = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.improving.OrganizationId]]),
        members = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[com.improving.MemberId]]).getOrElse(_root_.scala.Seq.empty),
        owners = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[com.improving.MemberId]]).getOrElse(_root_.scala.Seq.empty),
        contacts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[com.improving.organizationcontext.Contacts]]).getOrElse(_root_.scala.Seq.empty),
        orgMeta = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.improving.organizationcontext.MetaInfo]]),
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        status = com.improving.organizationcontext.organization.OrganizationStatus.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.improving.organizationcontext.organization.OrganizationStatus.Draft.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = OrganizationDomainProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = OrganizationDomainProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.improving.OrganizationId
      case 2 => __out = com.improving.organizationcontext.Info
      case 3 => __out = com.improving.OrganizationId
      case 4 => __out = com.improving.MemberId
      case 5 => __out = com.improving.MemberId
      case 6 => __out = com.improving.organizationcontext.Contacts
      case 7 => __out = com.improving.organizationcontext.MetaInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 9 => com.improving.organizationcontext.organization.OrganizationStatus
    }
  }
  lazy val defaultInstance = com.improving.organizationcontext.organization.Organization(
    oid = _root_.scala.None,
    info = _root_.scala.None,
    parent = _root_.scala.None,
    members = _root_.scala.Seq.empty,
    owners = _root_.scala.Seq.empty,
    contacts = _root_.scala.Seq.empty,
    orgMeta = _root_.scala.None,
    name = "",
    status = com.improving.organizationcontext.organization.OrganizationStatus.Draft
  )
  implicit class OrganizationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.improving.organizationcontext.organization.Organization]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.improving.organizationcontext.organization.Organization](_l) {
    def oid: _root_.scalapb.lenses.Lens[UpperPB, com.improving.OrganizationId] = field(_.getOid)((c_, f_) => c_.copy(oid = Option(f_)))
    def optionalOid: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.OrganizationId]] = field(_.oid)((c_, f_) => c_.copy(oid = f_))
    def info: _root_.scalapb.lenses.Lens[UpperPB, com.improving.organizationcontext.Info] = field(_.getInfo)((c_, f_) => c_.copy(info = Option(f_)))
    def optionalInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.organizationcontext.Info]] = field(_.info)((c_, f_) => c_.copy(info = f_))
    def parent: _root_.scalapb.lenses.Lens[UpperPB, com.improving.OrganizationId] = field(_.getParent)((c_, f_) => c_.copy(parent = Option(f_)))
    def optionalParent: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.OrganizationId]] = field(_.parent)((c_, f_) => c_.copy(parent = f_))
    def members: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.improving.MemberId]] = field(_.members)((c_, f_) => c_.copy(members = f_))
    def owners: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.improving.MemberId]] = field(_.owners)((c_, f_) => c_.copy(owners = f_))
    def contacts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.improving.organizationcontext.Contacts]] = field(_.contacts)((c_, f_) => c_.copy(contacts = f_))
    def orgMeta: _root_.scalapb.lenses.Lens[UpperPB, com.improving.organizationcontext.MetaInfo] = field(_.getOrgMeta)((c_, f_) => c_.copy(orgMeta = Option(f_)))
    def optionalOrgMeta: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.organizationcontext.MetaInfo]] = field(_.orgMeta)((c_, f_) => c_.copy(orgMeta = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def status: _root_.scalapb.lenses.Lens[UpperPB, com.improving.organizationcontext.organization.OrganizationStatus] = field(_.status)((c_, f_) => c_.copy(status = f_))
  }
  final val OID_FIELD_NUMBER = 1
  final val INFO_FIELD_NUMBER = 2
  final val PARENT_FIELD_NUMBER = 3
  final val MEMBERS_FIELD_NUMBER = 4
  final val OWNERS_FIELD_NUMBER = 5
  final val CONTACTS_FIELD_NUMBER = 6
  final val ORGMETA_FIELD_NUMBER = 7
  final val NAME_FIELD_NUMBER = 8
  final val STATUS_FIELD_NUMBER = 9
  def of(
    oid: _root_.scala.Option[com.improving.OrganizationId],
    info: _root_.scala.Option[com.improving.organizationcontext.Info],
    parent: _root_.scala.Option[com.improving.OrganizationId],
    members: _root_.scala.Seq[com.improving.MemberId],
    owners: _root_.scala.Seq[com.improving.MemberId],
    contacts: _root_.scala.Seq[com.improving.organizationcontext.Contacts],
    orgMeta: _root_.scala.Option[com.improving.organizationcontext.MetaInfo],
    name: _root_.scala.Predef.String,
    status: com.improving.organizationcontext.organization.OrganizationStatus
  ): _root_.com.improving.organizationcontext.organization.Organization = _root_.com.improving.organizationcontext.organization.Organization(
    oid,
    info,
    parent,
    members,
    owners,
    contacts,
    orgMeta,
    name,
    status
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[com.improving.organizationcontext.organization.Organization])
}
