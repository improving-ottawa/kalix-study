// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.improving.organizationcontext

@SerialVersionUID(0L)
final case class OrganizationEstablished(
    orgId: _root_.scala.Option[com.improving.OrganizationId] = _root_.scala.None,
    info: _root_.scala.Option[com.improving.organizationcontext.Info] = _root_.scala.None,
    parent: _root_.scala.Option[com.improving.organizationcontext.Parent] = _root_.scala.None,
    members: _root_.scala.Option[com.improving.organizationcontext.MemberList] = _root_.scala.None,
    owners: _root_.scala.Option[com.improving.organizationcontext.OwnerList] = _root_.scala.None,
    contacts: _root_.scala.Option[com.improving.organizationcontext.ContactList] = _root_.scala.None,
    establishingMember: _root_.scala.Option[com.improving.MemberId] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OrganizationEstablished] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (orgId.isDefined) {
        val __value = orgId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (info.isDefined) {
        val __value = info.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (parent.isDefined) {
        val __value = parent.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (members.isDefined) {
        val __value = members.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (owners.isDefined) {
        val __value = owners.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (contacts.isDefined) {
        val __value = contacts.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (establishingMember.isDefined) {
        val __value = establishingMember.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      orgId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      info.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      parent.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      members.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      owners.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      contacts.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      establishingMember.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getOrgId: com.improving.OrganizationId = orgId.getOrElse(com.improving.OrganizationId.defaultInstance)
    def clearOrgId: OrganizationEstablished = copy(orgId = _root_.scala.None)
    def withOrgId(__v: com.improving.OrganizationId): OrganizationEstablished = copy(orgId = Option(__v))
    def getInfo: com.improving.organizationcontext.Info = info.getOrElse(com.improving.organizationcontext.Info.defaultInstance)
    def clearInfo: OrganizationEstablished = copy(info = _root_.scala.None)
    def withInfo(__v: com.improving.organizationcontext.Info): OrganizationEstablished = copy(info = Option(__v))
    def getParent: com.improving.organizationcontext.Parent = parent.getOrElse(com.improving.organizationcontext.Parent.defaultInstance)
    def clearParent: OrganizationEstablished = copy(parent = _root_.scala.None)
    def withParent(__v: com.improving.organizationcontext.Parent): OrganizationEstablished = copy(parent = Option(__v))
    def getMembers: com.improving.organizationcontext.MemberList = members.getOrElse(com.improving.organizationcontext.MemberList.defaultInstance)
    def clearMembers: OrganizationEstablished = copy(members = _root_.scala.None)
    def withMembers(__v: com.improving.organizationcontext.MemberList): OrganizationEstablished = copy(members = Option(__v))
    def getOwners: com.improving.organizationcontext.OwnerList = owners.getOrElse(com.improving.organizationcontext.OwnerList.defaultInstance)
    def clearOwners: OrganizationEstablished = copy(owners = _root_.scala.None)
    def withOwners(__v: com.improving.organizationcontext.OwnerList): OrganizationEstablished = copy(owners = Option(__v))
    def getContacts: com.improving.organizationcontext.ContactList = contacts.getOrElse(com.improving.organizationcontext.ContactList.defaultInstance)
    def clearContacts: OrganizationEstablished = copy(contacts = _root_.scala.None)
    def withContacts(__v: com.improving.organizationcontext.ContactList): OrganizationEstablished = copy(contacts = Option(__v))
    def getEstablishingMember: com.improving.MemberId = establishingMember.getOrElse(com.improving.MemberId.defaultInstance)
    def clearEstablishingMember: OrganizationEstablished = copy(establishingMember = _root_.scala.None)
    def withEstablishingMember(__v: com.improving.MemberId): OrganizationEstablished = copy(establishingMember = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => orgId.orNull
        case 2 => info.orNull
        case 3 => parent.orNull
        case 4 => members.orNull
        case 5 => owners.orNull
        case 6 => contacts.orNull
        case 7 => establishingMember.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => orgId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => info.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => parent.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => members.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => owners.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => contacts.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => establishingMember.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.improving.organizationcontext.OrganizationEstablished.type = com.improving.organizationcontext.OrganizationEstablished
    // @@protoc_insertion_point(GeneratedMessage[com.improving.organizationcontext.OrganizationEstablished])
}

object OrganizationEstablished extends scalapb.GeneratedMessageCompanion[com.improving.organizationcontext.OrganizationEstablished] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.improving.organizationcontext.OrganizationEstablished] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.improving.organizationcontext.OrganizationEstablished = {
    var __orgId: _root_.scala.Option[com.improving.OrganizationId] = _root_.scala.None
    var __info: _root_.scala.Option[com.improving.organizationcontext.Info] = _root_.scala.None
    var __parent: _root_.scala.Option[com.improving.organizationcontext.Parent] = _root_.scala.None
    var __members: _root_.scala.Option[com.improving.organizationcontext.MemberList] = _root_.scala.None
    var __owners: _root_.scala.Option[com.improving.organizationcontext.OwnerList] = _root_.scala.None
    var __contacts: _root_.scala.Option[com.improving.organizationcontext.ContactList] = _root_.scala.None
    var __establishingMember: _root_.scala.Option[com.improving.MemberId] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __orgId = Option(__orgId.fold(_root_.scalapb.LiteParser.readMessage[com.improving.OrganizationId](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __info = Option(__info.fold(_root_.scalapb.LiteParser.readMessage[com.improving.organizationcontext.Info](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __parent = Option(__parent.fold(_root_.scalapb.LiteParser.readMessage[com.improving.organizationcontext.Parent](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __members = Option(__members.fold(_root_.scalapb.LiteParser.readMessage[com.improving.organizationcontext.MemberList](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __owners = Option(__owners.fold(_root_.scalapb.LiteParser.readMessage[com.improving.organizationcontext.OwnerList](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __contacts = Option(__contacts.fold(_root_.scalapb.LiteParser.readMessage[com.improving.organizationcontext.ContactList](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __establishingMember = Option(__establishingMember.fold(_root_.scalapb.LiteParser.readMessage[com.improving.MemberId](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.improving.organizationcontext.OrganizationEstablished(
        orgId = __orgId,
        info = __info,
        parent = __parent,
        members = __members,
        owners = __owners,
        contacts = __contacts,
        establishingMember = __establishingMember,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.improving.organizationcontext.OrganizationEstablished] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.improving.organizationcontext.OrganizationEstablished(
        orgId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.improving.OrganizationId]]),
        info = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.improving.organizationcontext.Info]]),
        parent = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.improving.organizationcontext.Parent]]),
        members = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.improving.organizationcontext.MemberList]]),
        owners = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.improving.organizationcontext.OwnerList]]),
        contacts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[com.improving.organizationcontext.ContactList]]),
        establishingMember = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.improving.MemberId]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = OrganizationContextDomainProto.javaDescriptor.getMessageTypes().get(16)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = OrganizationContextDomainProto.scalaDescriptor.messages(16)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.improving.OrganizationId
      case 2 => __out = com.improving.organizationcontext.Info
      case 3 => __out = com.improving.organizationcontext.Parent
      case 4 => __out = com.improving.organizationcontext.MemberList
      case 5 => __out = com.improving.organizationcontext.OwnerList
      case 6 => __out = com.improving.organizationcontext.ContactList
      case 7 => __out = com.improving.MemberId
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.improving.organizationcontext.OrganizationEstablished(
    orgId = _root_.scala.None,
    info = _root_.scala.None,
    parent = _root_.scala.None,
    members = _root_.scala.None,
    owners = _root_.scala.None,
    contacts = _root_.scala.None,
    establishingMember = _root_.scala.None
  )
  implicit class OrganizationEstablishedLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.improving.organizationcontext.OrganizationEstablished]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.improving.organizationcontext.OrganizationEstablished](_l) {
    def orgId: _root_.scalapb.lenses.Lens[UpperPB, com.improving.OrganizationId] = field(_.getOrgId)((c_, f_) => c_.copy(orgId = Option(f_)))
    def optionalOrgId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.OrganizationId]] = field(_.orgId)((c_, f_) => c_.copy(orgId = f_))
    def info: _root_.scalapb.lenses.Lens[UpperPB, com.improving.organizationcontext.Info] = field(_.getInfo)((c_, f_) => c_.copy(info = Option(f_)))
    def optionalInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.organizationcontext.Info]] = field(_.info)((c_, f_) => c_.copy(info = f_))
    def parent: _root_.scalapb.lenses.Lens[UpperPB, com.improving.organizationcontext.Parent] = field(_.getParent)((c_, f_) => c_.copy(parent = Option(f_)))
    def optionalParent: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.organizationcontext.Parent]] = field(_.parent)((c_, f_) => c_.copy(parent = f_))
    def members: _root_.scalapb.lenses.Lens[UpperPB, com.improving.organizationcontext.MemberList] = field(_.getMembers)((c_, f_) => c_.copy(members = Option(f_)))
    def optionalMembers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.organizationcontext.MemberList]] = field(_.members)((c_, f_) => c_.copy(members = f_))
    def owners: _root_.scalapb.lenses.Lens[UpperPB, com.improving.organizationcontext.OwnerList] = field(_.getOwners)((c_, f_) => c_.copy(owners = Option(f_)))
    def optionalOwners: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.organizationcontext.OwnerList]] = field(_.owners)((c_, f_) => c_.copy(owners = f_))
    def contacts: _root_.scalapb.lenses.Lens[UpperPB, com.improving.organizationcontext.ContactList] = field(_.getContacts)((c_, f_) => c_.copy(contacts = Option(f_)))
    def optionalContacts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.organizationcontext.ContactList]] = field(_.contacts)((c_, f_) => c_.copy(contacts = f_))
    def establishingMember: _root_.scalapb.lenses.Lens[UpperPB, com.improving.MemberId] = field(_.getEstablishingMember)((c_, f_) => c_.copy(establishingMember = Option(f_)))
    def optionalEstablishingMember: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.MemberId]] = field(_.establishingMember)((c_, f_) => c_.copy(establishingMember = f_))
  }
  final val ORGID_FIELD_NUMBER = 1
  final val INFO_FIELD_NUMBER = 2
  final val PARENT_FIELD_NUMBER = 3
  final val MEMBERS_FIELD_NUMBER = 4
  final val OWNERS_FIELD_NUMBER = 5
  final val CONTACTS_FIELD_NUMBER = 6
  final val ESTABLISHINGMEMBER_FIELD_NUMBER = 7
  def of(
    orgId: _root_.scala.Option[com.improving.OrganizationId],
    info: _root_.scala.Option[com.improving.organizationcontext.Info],
    parent: _root_.scala.Option[com.improving.organizationcontext.Parent],
    members: _root_.scala.Option[com.improving.organizationcontext.MemberList],
    owners: _root_.scala.Option[com.improving.organizationcontext.OwnerList],
    contacts: _root_.scala.Option[com.improving.organizationcontext.ContactList],
    establishingMember: _root_.scala.Option[com.improving.MemberId]
  ): _root_.com.improving.organizationcontext.OrganizationEstablished = _root_.com.improving.organizationcontext.OrganizationEstablished(
    orgId,
    info,
    parent,
    members,
    owners,
    contacts,
    establishingMember
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[com.improving.organizationcontext.OrganizationEstablished])
}
