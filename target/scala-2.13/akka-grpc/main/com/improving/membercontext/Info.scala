// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.improving.membercontext

/** @param avatar
  *   URL type?
  */
@SerialVersionUID(0L)
final case class Info(
    contact: _root_.scala.Option[com.improving.Contact] = _root_.scala.None,
    handle: _root_.scala.Predef.String = "",
    avatar: _root_.scala.Predef.String = "",
    firstName: _root_.scala.Predef.String = "",
    lastName: _root_.scala.Predef.String = "",
    mobileNumber: _root_.scala.Option[com.improving.MobileNumber] = _root_.scala.None,
    emailAddress: _root_.scala.Option[com.improving.EmailAddress] = _root_.scala.None,
    notificationPreference: com.improving.membercontext.NotificationPreference = com.improving.membercontext.NotificationPreference.EMAIL,
    organizationMembership: _root_.scala.Seq[com.improving.OrganizationId] = _root_.scala.Seq.empty,
    tenant: _root_.scala.Option[com.improving.TenantId] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Info] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (contact.isDefined) {
        val __value = contact.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = handle
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = avatar
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = firstName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = lastName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      if (mobileNumber.isDefined) {
        val __value = mobileNumber.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (emailAddress.isDefined) {
        val __value = emailAddress.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = notificationPreference.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(8, __value)
        }
      };
      organizationMembership.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (tenant.isDefined) {
        val __value = tenant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      contact.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = handle
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = avatar
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = firstName
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = lastName
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      mobileNumber.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      emailAddress.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = notificationPreference.value
        if (__v != 0) {
          _output__.writeEnum(8, __v)
        }
      };
      organizationMembership.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      tenant.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getContact: com.improving.Contact = contact.getOrElse(com.improving.Contact.defaultInstance)
    def clearContact: Info = copy(contact = _root_.scala.None)
    def withContact(__v: com.improving.Contact): Info = copy(contact = Option(__v))
    def withHandle(__v: _root_.scala.Predef.String): Info = copy(handle = __v)
    def withAvatar(__v: _root_.scala.Predef.String): Info = copy(avatar = __v)
    def withFirstName(__v: _root_.scala.Predef.String): Info = copy(firstName = __v)
    def withLastName(__v: _root_.scala.Predef.String): Info = copy(lastName = __v)
    def getMobileNumber: com.improving.MobileNumber = mobileNumber.getOrElse(com.improving.MobileNumber.defaultInstance)
    def clearMobileNumber: Info = copy(mobileNumber = _root_.scala.None)
    def withMobileNumber(__v: com.improving.MobileNumber): Info = copy(mobileNumber = Option(__v))
    def getEmailAddress: com.improving.EmailAddress = emailAddress.getOrElse(com.improving.EmailAddress.defaultInstance)
    def clearEmailAddress: Info = copy(emailAddress = _root_.scala.None)
    def withEmailAddress(__v: com.improving.EmailAddress): Info = copy(emailAddress = Option(__v))
    def withNotificationPreference(__v: com.improving.membercontext.NotificationPreference): Info = copy(notificationPreference = __v)
    def clearOrganizationMembership = copy(organizationMembership = _root_.scala.Seq.empty)
    def addOrganizationMembership(__vs: com.improving.OrganizationId *): Info = addAllOrganizationMembership(__vs)
    def addAllOrganizationMembership(__vs: Iterable[com.improving.OrganizationId]): Info = copy(organizationMembership = organizationMembership ++ __vs)
    def withOrganizationMembership(__v: _root_.scala.Seq[com.improving.OrganizationId]): Info = copy(organizationMembership = __v)
    def getTenant: com.improving.TenantId = tenant.getOrElse(com.improving.TenantId.defaultInstance)
    def clearTenant: Info = copy(tenant = _root_.scala.None)
    def withTenant(__v: com.improving.TenantId): Info = copy(tenant = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => contact.orNull
        case 2 => {
          val __t = handle
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = avatar
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = firstName
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = lastName
          if (__t != "") __t else null
        }
        case 6 => mobileNumber.orNull
        case 7 => emailAddress.orNull
        case 8 => {
          val __t = notificationPreference.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 9 => organizationMembership
        case 10 => tenant.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => contact.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(handle)
        case 3 => _root_.scalapb.descriptors.PString(avatar)
        case 4 => _root_.scalapb.descriptors.PString(firstName)
        case 5 => _root_.scalapb.descriptors.PString(lastName)
        case 6 => mobileNumber.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => emailAddress.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => _root_.scalapb.descriptors.PEnum(notificationPreference.scalaValueDescriptor)
        case 9 => _root_.scalapb.descriptors.PRepeated(organizationMembership.iterator.map(_.toPMessage).toVector)
        case 10 => tenant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.improving.membercontext.Info.type = com.improving.membercontext.Info
    // @@protoc_insertion_point(GeneratedMessage[com.improving.membercontext.Info])
}

object Info extends scalapb.GeneratedMessageCompanion[com.improving.membercontext.Info] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.improving.membercontext.Info] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.improving.membercontext.Info = {
    var __contact: _root_.scala.Option[com.improving.Contact] = _root_.scala.None
    var __handle: _root_.scala.Predef.String = ""
    var __avatar: _root_.scala.Predef.String = ""
    var __firstName: _root_.scala.Predef.String = ""
    var __lastName: _root_.scala.Predef.String = ""
    var __mobileNumber: _root_.scala.Option[com.improving.MobileNumber] = _root_.scala.None
    var __emailAddress: _root_.scala.Option[com.improving.EmailAddress] = _root_.scala.None
    var __notificationPreference: com.improving.membercontext.NotificationPreference = com.improving.membercontext.NotificationPreference.EMAIL
    val __organizationMembership: _root_.scala.collection.immutable.VectorBuilder[com.improving.OrganizationId] = new _root_.scala.collection.immutable.VectorBuilder[com.improving.OrganizationId]
    var __tenant: _root_.scala.Option[com.improving.TenantId] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __contact = Option(__contact.fold(_root_.scalapb.LiteParser.readMessage[com.improving.Contact](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __handle = _input__.readStringRequireUtf8()
        case 26 =>
          __avatar = _input__.readStringRequireUtf8()
        case 34 =>
          __firstName = _input__.readStringRequireUtf8()
        case 42 =>
          __lastName = _input__.readStringRequireUtf8()
        case 50 =>
          __mobileNumber = Option(__mobileNumber.fold(_root_.scalapb.LiteParser.readMessage[com.improving.MobileNumber](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __emailAddress = Option(__emailAddress.fold(_root_.scalapb.LiteParser.readMessage[com.improving.EmailAddress](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 64 =>
          __notificationPreference = com.improving.membercontext.NotificationPreference.fromValue(_input__.readEnum())
        case 74 =>
          __organizationMembership += _root_.scalapb.LiteParser.readMessage[com.improving.OrganizationId](_input__)
        case 82 =>
          __tenant = Option(__tenant.fold(_root_.scalapb.LiteParser.readMessage[com.improving.TenantId](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.improving.membercontext.Info(
        contact = __contact,
        handle = __handle,
        avatar = __avatar,
        firstName = __firstName,
        lastName = __lastName,
        mobileNumber = __mobileNumber,
        emailAddress = __emailAddress,
        notificationPreference = __notificationPreference,
        organizationMembership = __organizationMembership.result(),
        tenant = __tenant,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.improving.membercontext.Info] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.improving.membercontext.Info(
        contact = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.improving.Contact]]),
        handle = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        avatar = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        firstName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        lastName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        mobileNumber = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[com.improving.MobileNumber]]),
        emailAddress = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.improving.EmailAddress]]),
        notificationPreference = com.improving.membercontext.NotificationPreference.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.improving.membercontext.NotificationPreference.EMAIL.scalaValueDescriptor).number),
        organizationMembership = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[com.improving.OrganizationId]]).getOrElse(_root_.scala.Seq.empty),
        tenant = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[com.improving.TenantId]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MemberContextDomainProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MemberContextDomainProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.improving.Contact
      case 6 => __out = com.improving.MobileNumber
      case 7 => __out = com.improving.EmailAddress
      case 9 => __out = com.improving.OrganizationId
      case 10 => __out = com.improving.TenantId
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 8 => com.improving.membercontext.NotificationPreference
    }
  }
  lazy val defaultInstance = com.improving.membercontext.Info(
    contact = _root_.scala.None,
    handle = "",
    avatar = "",
    firstName = "",
    lastName = "",
    mobileNumber = _root_.scala.None,
    emailAddress = _root_.scala.None,
    notificationPreference = com.improving.membercontext.NotificationPreference.EMAIL,
    organizationMembership = _root_.scala.Seq.empty,
    tenant = _root_.scala.None
  )
  implicit class InfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.improving.membercontext.Info]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.improving.membercontext.Info](_l) {
    def contact: _root_.scalapb.lenses.Lens[UpperPB, com.improving.Contact] = field(_.getContact)((c_, f_) => c_.copy(contact = Option(f_)))
    def optionalContact: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.Contact]] = field(_.contact)((c_, f_) => c_.copy(contact = f_))
    def handle: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.handle)((c_, f_) => c_.copy(handle = f_))
    def avatar: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.avatar)((c_, f_) => c_.copy(avatar = f_))
    def firstName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.firstName)((c_, f_) => c_.copy(firstName = f_))
    def lastName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.lastName)((c_, f_) => c_.copy(lastName = f_))
    def mobileNumber: _root_.scalapb.lenses.Lens[UpperPB, com.improving.MobileNumber] = field(_.getMobileNumber)((c_, f_) => c_.copy(mobileNumber = Option(f_)))
    def optionalMobileNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.MobileNumber]] = field(_.mobileNumber)((c_, f_) => c_.copy(mobileNumber = f_))
    def emailAddress: _root_.scalapb.lenses.Lens[UpperPB, com.improving.EmailAddress] = field(_.getEmailAddress)((c_, f_) => c_.copy(emailAddress = Option(f_)))
    def optionalEmailAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.EmailAddress]] = field(_.emailAddress)((c_, f_) => c_.copy(emailAddress = f_))
    def notificationPreference: _root_.scalapb.lenses.Lens[UpperPB, com.improving.membercontext.NotificationPreference] = field(_.notificationPreference)((c_, f_) => c_.copy(notificationPreference = f_))
    def organizationMembership: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.improving.OrganizationId]] = field(_.organizationMembership)((c_, f_) => c_.copy(organizationMembership = f_))
    def tenant: _root_.scalapb.lenses.Lens[UpperPB, com.improving.TenantId] = field(_.getTenant)((c_, f_) => c_.copy(tenant = Option(f_)))
    def optionalTenant: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.TenantId]] = field(_.tenant)((c_, f_) => c_.copy(tenant = f_))
  }
  final val CONTACT_FIELD_NUMBER = 1
  final val HANDLE_FIELD_NUMBER = 2
  final val AVATAR_FIELD_NUMBER = 3
  final val FIRSTNAME_FIELD_NUMBER = 4
  final val LASTNAME_FIELD_NUMBER = 5
  final val MOBILENUMBER_FIELD_NUMBER = 6
  final val EMAILADDRESS_FIELD_NUMBER = 7
  final val NOTIFICATIONPREFERENCE_FIELD_NUMBER = 8
  final val ORGANIZATIONMEMBERSHIP_FIELD_NUMBER = 9
  final val TENANT_FIELD_NUMBER = 10
  def of(
    contact: _root_.scala.Option[com.improving.Contact],
    handle: _root_.scala.Predef.String,
    avatar: _root_.scala.Predef.String,
    firstName: _root_.scala.Predef.String,
    lastName: _root_.scala.Predef.String,
    mobileNumber: _root_.scala.Option[com.improving.MobileNumber],
    emailAddress: _root_.scala.Option[com.improving.EmailAddress],
    notificationPreference: com.improving.membercontext.NotificationPreference,
    organizationMembership: _root_.scala.Seq[com.improving.OrganizationId],
    tenant: _root_.scala.Option[com.improving.TenantId]
  ): _root_.com.improving.membercontext.Info = _root_.com.improving.membercontext.Info(
    contact,
    handle,
    avatar,
    firstName,
    lastName,
    mobileNumber,
    emailAddress,
    notificationPreference,
    organizationMembership,
    tenant
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[com.improving.membercontext.Info])
}
