// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.improving

@SerialVersionUID(0L)
final case class Contact(
    firstName: _root_.scala.Predef.String = "",
    lastName: _root_.scala.Predef.String = "",
    emailAddress: _root_.scala.Option[com.improving.EmailAddress] = _root_.scala.None,
    phone: _root_.scala.Option[com.improving.MobileNumber] = _root_.scala.None,
    userName: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Contact] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = firstName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = lastName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      if (emailAddress.isDefined) {
        val __value = emailAddress.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (phone.isDefined) {
        val __value = phone.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = userName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = firstName
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = lastName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      emailAddress.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      phone.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = userName
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withFirstName(__v: _root_.scala.Predef.String): Contact = copy(firstName = __v)
    def withLastName(__v: _root_.scala.Predef.String): Contact = copy(lastName = __v)
    def getEmailAddress: com.improving.EmailAddress = emailAddress.getOrElse(com.improving.EmailAddress.defaultInstance)
    def clearEmailAddress: Contact = copy(emailAddress = _root_.scala.None)
    def withEmailAddress(__v: com.improving.EmailAddress): Contact = copy(emailAddress = Option(__v))
    def getPhone: com.improving.MobileNumber = phone.getOrElse(com.improving.MobileNumber.defaultInstance)
    def clearPhone: Contact = copy(phone = _root_.scala.None)
    def withPhone(__v: com.improving.MobileNumber): Contact = copy(phone = Option(__v))
    def withUserName(__v: _root_.scala.Predef.String): Contact = copy(userName = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = firstName
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = lastName
          if (__t != "") __t else null
        }
        case 3 => emailAddress.orNull
        case 4 => phone.orNull
        case 5 => {
          val __t = userName
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(firstName)
        case 2 => _root_.scalapb.descriptors.PString(lastName)
        case 3 => emailAddress.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => phone.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PString(userName)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.improving.Contact.type = com.improving.Contact
    // @@protoc_insertion_point(GeneratedMessage[com.improving.Contact])
}

object Contact extends scalapb.GeneratedMessageCompanion[com.improving.Contact] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.improving.Contact] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.improving.Contact = {
    var __firstName: _root_.scala.Predef.String = ""
    var __lastName: _root_.scala.Predef.String = ""
    var __emailAddress: _root_.scala.Option[com.improving.EmailAddress] = _root_.scala.None
    var __phone: _root_.scala.Option[com.improving.MobileNumber] = _root_.scala.None
    var __userName: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __firstName = _input__.readStringRequireUtf8()
        case 18 =>
          __lastName = _input__.readStringRequireUtf8()
        case 26 =>
          __emailAddress = Option(__emailAddress.fold(_root_.scalapb.LiteParser.readMessage[com.improving.EmailAddress](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __phone = Option(__phone.fold(_root_.scalapb.LiteParser.readMessage[com.improving.MobileNumber](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __userName = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.improving.Contact(
        firstName = __firstName,
        lastName = __lastName,
        emailAddress = __emailAddress,
        phone = __phone,
        userName = __userName,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.improving.Contact] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.improving.Contact(
        firstName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        lastName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        emailAddress = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.improving.EmailAddress]]),
        phone = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.improving.MobileNumber]]),
        userName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CommonDomainProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CommonDomainProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = com.improving.EmailAddress
      case 4 => __out = com.improving.MobileNumber
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.improving.Contact(
    firstName = "",
    lastName = "",
    emailAddress = _root_.scala.None,
    phone = _root_.scala.None,
    userName = ""
  )
  implicit class ContactLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.improving.Contact]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.improving.Contact](_l) {
    def firstName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.firstName)((c_, f_) => c_.copy(firstName = f_))
    def lastName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.lastName)((c_, f_) => c_.copy(lastName = f_))
    def emailAddress: _root_.scalapb.lenses.Lens[UpperPB, com.improving.EmailAddress] = field(_.getEmailAddress)((c_, f_) => c_.copy(emailAddress = Option(f_)))
    def optionalEmailAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.EmailAddress]] = field(_.emailAddress)((c_, f_) => c_.copy(emailAddress = f_))
    def phone: _root_.scalapb.lenses.Lens[UpperPB, com.improving.MobileNumber] = field(_.getPhone)((c_, f_) => c_.copy(phone = Option(f_)))
    def optionalPhone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.MobileNumber]] = field(_.phone)((c_, f_) => c_.copy(phone = f_))
    def userName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.userName)((c_, f_) => c_.copy(userName = f_))
  }
  final val FIRSTNAME_FIELD_NUMBER = 1
  final val LASTNAME_FIELD_NUMBER = 2
  final val EMAILADDRESS_FIELD_NUMBER = 3
  final val PHONE_FIELD_NUMBER = 4
  final val USERNAME_FIELD_NUMBER = 5
  def of(
    firstName: _root_.scala.Predef.String,
    lastName: _root_.scala.Predef.String,
    emailAddress: _root_.scala.Option[com.improving.EmailAddress],
    phone: _root_.scala.Option[com.improving.MobileNumber],
    userName: _root_.scala.Predef.String
  ): _root_.com.improving.Contact = _root_.com.improving.Contact(
    firstName,
    lastName,
    emailAddress,
    phone,
    userName
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[com.improving.Contact])
}
