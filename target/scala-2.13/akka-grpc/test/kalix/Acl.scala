// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package kalix

/** ACL configuration for a resource.
  *
  * @param allow
  *   Principals that are allowed to access this resource.
  *  
  *   An incoming request must have at least one principal associated with it in this list to be allowed.
  * @param deny
  *   Principals that are not allowed to access this resource.
  *  
  *   After matching an allow rule, an incoming request that has at least one principal that matches a deny rule will
  *   be denied.
  * @param denyCode
  *   The gRPC status code to respond with when access is denied.
  *  
  *   By default, this will be 7 (permission denied), but alternatives might include 16 (unauthenticated) or 5 (not
  *   found). If 0, indicates that the code should be inherited from the parent (regardless of the inherit field).
  *  
  *   When HTTP transcoding is in use, this code will be translated to an equivalent HTTP status code.
  */
@SerialVersionUID(0L)
final case class Acl(
    allow: _root_.scala.Seq[kalix.PrincipalMatcher] = _root_.scala.Seq.empty,
    deny: _root_.scala.Seq[kalix.PrincipalMatcher] = _root_.scala.Seq.empty,
    denyCode: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Acl] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      allow.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      deny.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = denyCode
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      allow.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      deny.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = denyCode
        if (__v != 0) {
          _output__.writeUInt32(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearAllow = copy(allow = _root_.scala.Seq.empty)
    def addAllow(__vs: kalix.PrincipalMatcher *): Acl = addAllAllow(__vs)
    def addAllAllow(__vs: Iterable[kalix.PrincipalMatcher]): Acl = copy(allow = allow ++ __vs)
    def withAllow(__v: _root_.scala.Seq[kalix.PrincipalMatcher]): Acl = copy(allow = __v)
    def clearDeny = copy(deny = _root_.scala.Seq.empty)
    def addDeny(__vs: kalix.PrincipalMatcher *): Acl = addAllDeny(__vs)
    def addAllDeny(__vs: Iterable[kalix.PrincipalMatcher]): Acl = copy(deny = deny ++ __vs)
    def withDeny(__v: _root_.scala.Seq[kalix.PrincipalMatcher]): Acl = copy(deny = __v)
    def withDenyCode(__v: _root_.scala.Int): Acl = copy(denyCode = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => allow
        case 2 => deny
        case 3 => {
          val __t = denyCode
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(allow.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(deny.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PInt(denyCode)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: kalix.Acl.type = kalix.Acl
    // @@protoc_insertion_point(GeneratedMessage[kalix.Acl])
}

object Acl extends scalapb.GeneratedMessageCompanion[kalix.Acl] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[kalix.Acl] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): kalix.Acl = {
    val __allow: _root_.scala.collection.immutable.VectorBuilder[kalix.PrincipalMatcher] = new _root_.scala.collection.immutable.VectorBuilder[kalix.PrincipalMatcher]
    val __deny: _root_.scala.collection.immutable.VectorBuilder[kalix.PrincipalMatcher] = new _root_.scala.collection.immutable.VectorBuilder[kalix.PrincipalMatcher]
    var __denyCode: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __allow += _root_.scalapb.LiteParser.readMessage[kalix.PrincipalMatcher](_input__)
        case 18 =>
          __deny += _root_.scalapb.LiteParser.readMessage[kalix.PrincipalMatcher](_input__)
        case 24 =>
          __denyCode = _input__.readUInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    kalix.Acl(
        allow = __allow.result(),
        deny = __deny.result(),
        denyCode = __denyCode,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[kalix.Acl] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      kalix.Acl(
        allow = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[kalix.PrincipalMatcher]]).getOrElse(_root_.scala.Seq.empty),
        deny = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[kalix.PrincipalMatcher]]).getOrElse(_root_.scala.Seq.empty),
        denyCode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AclProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AclProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = kalix.PrincipalMatcher
      case 2 => __out = kalix.PrincipalMatcher
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = kalix.Acl(
    allow = _root_.scala.Seq.empty,
    deny = _root_.scala.Seq.empty,
    denyCode = 0
  )
  implicit class AclLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, kalix.Acl]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, kalix.Acl](_l) {
    def allow: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[kalix.PrincipalMatcher]] = field(_.allow)((c_, f_) => c_.copy(allow = f_))
    def deny: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[kalix.PrincipalMatcher]] = field(_.deny)((c_, f_) => c_.copy(deny = f_))
    def denyCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.denyCode)((c_, f_) => c_.copy(denyCode = f_))
  }
  final val ALLOW_FIELD_NUMBER = 1
  final val DENY_FIELD_NUMBER = 2
  final val DENY_CODE_FIELD_NUMBER = 3
  def of(
    allow: _root_.scala.Seq[kalix.PrincipalMatcher],
    deny: _root_.scala.Seq[kalix.PrincipalMatcher],
    denyCode: _root_.scala.Int
  ): _root_.kalix.Acl = _root_.kalix.Acl(
    allow,
    deny,
    denyCode
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[kalix.Acl])
}
