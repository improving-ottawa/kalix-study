// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package kalix

/** @param claim
  *   The inclusion strategy for this field as a claim.
  * @param name
  *   The name of the claim for this field. Only valid for fields with a claim annotation of INCLUDE or NEST. If not
  *   set, the name will be the name of this field.
  * @param token
  *   Indicates that this field contains a token, either to be validated, or to be written to.
  *   If the field is a single string, then the JWT claim for the containing message will be written to it.
  *   If the field is a message or repeated field of messages, then this instructs validation and signing to descend
  *   into the message or messages, and validate/sign each one according to the annotations present. If no token
  *   annotation is present in the child message, an error will be raised.
  * @param includeParentClaims
  *   If this token annotated field is a child message of a parent, include the claims from the parent in the token.
  * @param includeBearerTokenClaim
  *   A list of bearer token claims to include when signing or validating a token annotated field.
  *  
  *   The most common use case for this will be pinning tokens contained in this message to the subject in the bearer
  *   token, to ensure that the tokens in the message can't be used by other subjects.
  *  
  *   Bearer token claims will only be included if the method is configured to validate the bearer token, otherwise,
  *   validation will fail if the claim can't be read.
  * @param issuer
  *   If set, then when validating a token, only accept the token if it comes from this issuer, and when signing, set
  *   the issuer to this value.
  *  
  *   This can be used in combination with the issuer field of configuration for JWT secrets, if there is at least one
  *   secret that has this issuer set, then only those secrets with that issuer set will be used for validating or
  *   signing this token, so you can be sure that the token did come from a particular issuer.
  *  
  *   If an issuer (iss) claim is extracted from another field, this configuration, if set, will override that.
  * @param expiresSeconds
  *   When signing, set the expires claim to be in this many seconds.
  *  
  *   If unset or zero, will default to 3600 (1 hour). Set to -1 for no expiry.
  *  
  *   This configuration will override any expiry (exp) claim extracted from other fields. Leave unset, or set to -1,
  *   to allow the expiry to be dynamically set.
  */
@SerialVersionUID(0L)
final case class JwtFieldOptions(
    claim: kalix.JwtFieldOptions.JwtClaimInclude = kalix.JwtFieldOptions.JwtClaimInclude.UNSPECIFIED,
    name: _root_.scala.Predef.String = "",
    token: _root_.scala.Boolean = false,
    includeParentClaims: _root_.scala.Boolean = false,
    includeBearerTokenClaim: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    issuer: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    expiresSeconds: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[JwtFieldOptions] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = claim.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = token
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      
      {
        val __value = includeParentClaims
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      includeBearerTokenClaim.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      issuer.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      }
      
      {
        val __value = expiresSeconds
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = claim.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = token
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      {
        val __v = includeParentClaims
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      includeBearerTokenClaim.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      issuer.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      {
        val __v = expiresSeconds
        if (__v != 0L) {
          _output__.writeInt64(7, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withClaim(__v: kalix.JwtFieldOptions.JwtClaimInclude): JwtFieldOptions = copy(claim = __v)
    def withName(__v: _root_.scala.Predef.String): JwtFieldOptions = copy(name = __v)
    def withToken(__v: _root_.scala.Boolean): JwtFieldOptions = copy(token = __v)
    def withIncludeParentClaims(__v: _root_.scala.Boolean): JwtFieldOptions = copy(includeParentClaims = __v)
    def clearIncludeBearerTokenClaim = copy(includeBearerTokenClaim = _root_.scala.Seq.empty)
    def addIncludeBearerTokenClaim(__vs: _root_.scala.Predef.String *): JwtFieldOptions = addAllIncludeBearerTokenClaim(__vs)
    def addAllIncludeBearerTokenClaim(__vs: Iterable[_root_.scala.Predef.String]): JwtFieldOptions = copy(includeBearerTokenClaim = includeBearerTokenClaim ++ __vs)
    def withIncludeBearerTokenClaim(__v: _root_.scala.Seq[_root_.scala.Predef.String]): JwtFieldOptions = copy(includeBearerTokenClaim = __v)
    def clearIssuer = copy(issuer = _root_.scala.Seq.empty)
    def addIssuer(__vs: _root_.scala.Predef.String *): JwtFieldOptions = addAllIssuer(__vs)
    def addAllIssuer(__vs: Iterable[_root_.scala.Predef.String]): JwtFieldOptions = copy(issuer = issuer ++ __vs)
    def withIssuer(__v: _root_.scala.Seq[_root_.scala.Predef.String]): JwtFieldOptions = copy(issuer = __v)
    def withExpiresSeconds(__v: _root_.scala.Long): JwtFieldOptions = copy(expiresSeconds = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = claim.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = token
          if (__t != false) __t else null
        }
        case 4 => {
          val __t = includeParentClaims
          if (__t != false) __t else null
        }
        case 5 => includeBearerTokenClaim
        case 6 => issuer
        case 7 => {
          val __t = expiresSeconds
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(claim.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(name)
        case 3 => _root_.scalapb.descriptors.PBoolean(token)
        case 4 => _root_.scalapb.descriptors.PBoolean(includeParentClaims)
        case 5 => _root_.scalapb.descriptors.PRepeated(includeBearerTokenClaim.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(issuer.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 7 => _root_.scalapb.descriptors.PLong(expiresSeconds)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: kalix.JwtFieldOptions.type = kalix.JwtFieldOptions
    // @@protoc_insertion_point(GeneratedMessage[kalix.JwtFieldOptions])
}

object JwtFieldOptions extends scalapb.GeneratedMessageCompanion[kalix.JwtFieldOptions] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[kalix.JwtFieldOptions] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): kalix.JwtFieldOptions = {
    var __claim: kalix.JwtFieldOptions.JwtClaimInclude = kalix.JwtFieldOptions.JwtClaimInclude.UNSPECIFIED
    var __name: _root_.scala.Predef.String = ""
    var __token: _root_.scala.Boolean = false
    var __includeParentClaims: _root_.scala.Boolean = false
    val __includeBearerTokenClaim: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __issuer: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __expiresSeconds: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __claim = kalix.JwtFieldOptions.JwtClaimInclude.fromValue(_input__.readEnum())
        case 18 =>
          __name = _input__.readStringRequireUtf8()
        case 24 =>
          __token = _input__.readBool()
        case 32 =>
          __includeParentClaims = _input__.readBool()
        case 42 =>
          __includeBearerTokenClaim += _input__.readStringRequireUtf8()
        case 50 =>
          __issuer += _input__.readStringRequireUtf8()
        case 56 =>
          __expiresSeconds = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    kalix.JwtFieldOptions(
        claim = __claim,
        name = __name,
        token = __token,
        includeParentClaims = __includeParentClaims,
        includeBearerTokenClaim = __includeBearerTokenClaim.result(),
        issuer = __issuer.result(),
        expiresSeconds = __expiresSeconds,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[kalix.JwtFieldOptions] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      kalix.JwtFieldOptions(
        claim = kalix.JwtFieldOptions.JwtClaimInclude.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(kalix.JwtFieldOptions.JwtClaimInclude.UNSPECIFIED.scalaValueDescriptor).number),
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        token = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        includeParentClaims = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        includeBearerTokenClaim = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        issuer = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        expiresSeconds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = JwtProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = JwtProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => kalix.JwtFieldOptions.JwtClaimInclude
    }
  }
  lazy val defaultInstance = kalix.JwtFieldOptions(
    claim = kalix.JwtFieldOptions.JwtClaimInclude.UNSPECIFIED,
    name = "",
    token = false,
    includeParentClaims = false,
    includeBearerTokenClaim = _root_.scala.Seq.empty,
    issuer = _root_.scala.Seq.empty,
    expiresSeconds = 0L
  )
  /** Describes how a particular field gets included as a claim in a JWT.
    */
  sealed abstract class JwtClaimInclude(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = JwtClaimInclude
    def isUnspecified: _root_.scala.Boolean = false
    def isInclude: _root_.scala.Boolean = false
    def isExtract: _root_.scala.Boolean = false
    def isDescend: _root_.scala.Boolean = false
    def isNest: _root_.scala.Boolean = false
    def isRaw: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[JwtClaimInclude] = kalix.JwtFieldOptions.JwtClaimInclude
    final def asRecognized: _root_.scala.Option[kalix.JwtFieldOptions.JwtClaimInclude.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[kalix.JwtFieldOptions.JwtClaimInclude.Recognized])
  }
  
  object JwtClaimInclude extends _root_.scalapb.GeneratedEnumCompanion[JwtClaimInclude] {
    sealed trait Recognized extends JwtClaimInclude
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[JwtClaimInclude] = this
    
    /** Don't include this field in the JWT.
      */
    @SerialVersionUID(0L)
    case object UNSPECIFIED extends JwtClaimInclude(0) with JwtClaimInclude.Recognized {
      val index = 0
      val name = "UNSPECIFIED"
      override def isUnspecified: _root_.scala.Boolean = true
    }
    
    /** Include this field in the JWT. The field will be converted to JSON. If it is a message or repeated field,
      * it will not be descended into, but will be included in its JSON form.
      */
    @SerialVersionUID(0L)
    case object INCLUDE extends JwtClaimInclude(1) with JwtClaimInclude.Recognized {
      val index = 1
      val name = "INCLUDE"
      override def isInclude: _root_.scala.Boolean = true
    }
    
    /** Extract the value for this field from the JWT. When validating messages, if this field is empty, the value
      * for it will be replaced with the value from the JWT, otherwise, it will be validated against the claim in
      * the JWT. When signing messages, this has exactly the same operation as INCLUDE.
      */
    @SerialVersionUID(0L)
    case object EXTRACT extends JwtClaimInclude(2) with JwtClaimInclude.Recognized {
      val index = 2
      val name = "EXTRACT"
      override def isExtract: _root_.scala.Boolean = true
    }
    
    /** Descend into this field, including the claims in the child message as claims in this message. Only valid for
      * non repeated message fields.
      */
    @SerialVersionUID(0L)
    case object DESCEND extends JwtClaimInclude(3) with JwtClaimInclude.Recognized {
      val index = 3
      val name = "DESCEND"
      override def isDescend: _root_.scala.Boolean = true
    }
    
    /** Nest the claims in this field inside an object or array in this claim. Only valid on message fields. If repeated,
      * the claim will contain an array of the claims extracted from each message.
      */
    @SerialVersionUID(0L)
    case object NEST extends JwtClaimInclude(4) with JwtClaimInclude.Recognized {
      val index = 4
      val name = "NEST"
      override def isNest: _root_.scala.Boolean = true
    }
    
    /** Indicates that this field contains a raw set of claims. The type of the field must be a map of strings to
      * json serializable values.
      *
      * When deserializing, whatever value is contained in this field is overwritten - the value is not validated to
      * ensure it matches the incoming claims. Any claims that can't be deserialized to the value type of the map will
      * be ignored. Multiple fields in a message with different value types can be used to capture raw claims of
      * different types.
      *
      * When serializing, the value in this message is used as the claims for the JWT (plus any other claim or raw
      * annotated fields), and the value of the field will be blanked to zero before serialising to protobuf.
      */
    @SerialVersionUID(0L)
    case object RAW extends JwtClaimInclude(5) with JwtClaimInclude.Recognized {
      val index = 5
      val name = "RAW"
      override def isRaw: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends JwtClaimInclude(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values = scala.collection.immutable.Seq(UNSPECIFIED, INCLUDE, EXTRACT, DESCEND, NEST, RAW)
    def fromValue(__value: _root_.scala.Int): JwtClaimInclude = __value match {
      case 0 => UNSPECIFIED
      case 1 => INCLUDE
      case 2 => EXTRACT
      case 3 => DESCEND
      case 4 => NEST
      case 5 => RAW
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = kalix.JwtFieldOptions.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = kalix.JwtFieldOptions.scalaDescriptor.enums(0)
  }
  implicit class JwtFieldOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, kalix.JwtFieldOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, kalix.JwtFieldOptions](_l) {
    def claim: _root_.scalapb.lenses.Lens[UpperPB, kalix.JwtFieldOptions.JwtClaimInclude] = field(_.claim)((c_, f_) => c_.copy(claim = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def token: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.token)((c_, f_) => c_.copy(token = f_))
    def includeParentClaims: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.includeParentClaims)((c_, f_) => c_.copy(includeParentClaims = f_))
    def includeBearerTokenClaim: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.includeBearerTokenClaim)((c_, f_) => c_.copy(includeBearerTokenClaim = f_))
    def issuer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.issuer)((c_, f_) => c_.copy(issuer = f_))
    def expiresSeconds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.expiresSeconds)((c_, f_) => c_.copy(expiresSeconds = f_))
  }
  final val CLAIM_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val TOKEN_FIELD_NUMBER = 3
  final val INCLUDE_PARENT_CLAIMS_FIELD_NUMBER = 4
  final val INCLUDE_BEARER_TOKEN_CLAIM_FIELD_NUMBER = 5
  final val ISSUER_FIELD_NUMBER = 6
  final val EXPIRES_SECONDS_FIELD_NUMBER = 7
  def of(
    claim: kalix.JwtFieldOptions.JwtClaimInclude,
    name: _root_.scala.Predef.String,
    token: _root_.scala.Boolean,
    includeParentClaims: _root_.scala.Boolean,
    includeBearerTokenClaim: _root_.scala.Seq[_root_.scala.Predef.String],
    issuer: _root_.scala.Seq[_root_.scala.Predef.String],
    expiresSeconds: _root_.scala.Long
  ): _root_.kalix.JwtFieldOptions = _root_.kalix.JwtFieldOptions(
    claim,
    name,
    token,
    includeParentClaims,
    includeBearerTokenClaim,
    issuer,
    expiresSeconds
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[kalix.JwtFieldOptions])
}
