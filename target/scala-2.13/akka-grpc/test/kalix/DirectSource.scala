// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package kalix

/** Direct service-to-service streaming from another Kalix service
  *
  * @param service
  *   The deployed name of the service to consume, can be the deployed name of another
  *   Kalix service in the same Kalix Project or a fully qualified public hostname of
  *   a Kalix service in a different project.
  *  
  *   Note: The service name is used as unique identifier for tracking progress in consuming it
  *   changing this name will lead to starting over from the beginning of the direct event stream
  *  
  *   Can be a template referencing an environment variable "${MY_ENV_NAME}" set for the service at deploy
  * @param eventStreamId
  *   The unique identifier of the stream in the producing service
  */
@SerialVersionUID(0L)
final case class DirectSource(
    service: _root_.scala.Predef.String = "",
    eventStreamId: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DirectSource] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = service
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = eventStreamId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = service
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = eventStreamId
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withService(__v: _root_.scala.Predef.String): DirectSource = copy(service = __v)
    def withEventStreamId(__v: _root_.scala.Predef.String): DirectSource = copy(eventStreamId = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = service
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = eventStreamId
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(service)
        case 2 => _root_.scalapb.descriptors.PString(eventStreamId)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: kalix.DirectSource.type = kalix.DirectSource
    // @@protoc_insertion_point(GeneratedMessage[kalix.DirectSource])
}

object DirectSource extends scalapb.GeneratedMessageCompanion[kalix.DirectSource] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[kalix.DirectSource] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): kalix.DirectSource = {
    var __service: _root_.scala.Predef.String = ""
    var __eventStreamId: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __service = _input__.readStringRequireUtf8()
        case 18 =>
          __eventStreamId = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    kalix.DirectSource(
        service = __service,
        eventStreamId = __eventStreamId,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[kalix.DirectSource] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      kalix.DirectSource(
        service = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        eventStreamId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventingProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventingProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = kalix.DirectSource(
    service = "",
    eventStreamId = ""
  )
  implicit class DirectSourceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, kalix.DirectSource]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, kalix.DirectSource](_l) {
    def service: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.service)((c_, f_) => c_.copy(service = f_))
    def eventStreamId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.eventStreamId)((c_, f_) => c_.copy(eventStreamId = f_))
  }
  final val SERVICE_FIELD_NUMBER = 1
  final val EVENT_STREAM_ID_FIELD_NUMBER = 2
  def of(
    service: _root_.scala.Predef.String,
    eventStreamId: _root_.scala.Predef.String
  ): _root_.kalix.DirectSource = _root_.kalix.DirectSource(
    service,
    eventStreamId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[kalix.DirectSource])
}
