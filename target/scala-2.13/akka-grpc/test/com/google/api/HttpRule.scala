// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.api

/** # gRPC Transcoding
  *
  * gRPC Transcoding is a feature for mapping between a gRPC method and one or
  * more HTTP REST endpoints. It allows developers to build a single API service
  * that supports both gRPC APIs and REST APIs. Many systems, including [Google
  * APIs](https://github.com/googleapis/googleapis),
  * [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC
  * Gateway](https://github.com/grpc-ecosystem/grpc-gateway),
  * and [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature
  * and use it for large scale production services.
  *
  * `HttpRule` defines the schema of the gRPC/REST mapping. The mapping specifies
  * how different portions of the gRPC request message are mapped to the URL
  * path, URL query parameters, and HTTP request body. It also controls how the
  * gRPC response message is mapped to the HTTP response body. `HttpRule` is
  * typically specified as an `google.api.http` annotation on the gRPC method.
  *
  * Each mapping specifies a URL path template and an HTTP method. The path
  * template may refer to one or more fields in the gRPC request message, as long
  * as each field is a non-repeated field with a primitive (non-message) type.
  * The path template controls how fields of the request message are mapped to
  * the URL path.
  *
  * Example:
  *
  *     service Messaging {
  *       rpc GetMessage(GetMessageRequest) returns (Message) {
  *         option (google.api.http) = {
  *             get: "/v1/{name=messages/&#42;}"
  *         };
  *       }
  *     }
  *     message GetMessageRequest {
  *       string name = 1; // Mapped to URL path.
  *     }
  *     message Message {
  *       string text = 1; // The resource content.
  *     }
  *
  * This enables an HTTP REST to gRPC mapping as below:
  *
  * HTTP | gRPC
  * -----|-----
  * `GET /v1/messages/123456`  | `GetMessage(name: "messages/123456")`
  *
  * Any fields in the request message which are not bound by the path template
  * automatically become HTTP query parameters if there is no HTTP request body.
  * For example:
  *
  *     service Messaging {
  *       rpc GetMessage(GetMessageRequest) returns (Message) {
  *         option (google.api.http) = {
  *             get:"/v1/messages/{message_id}"
  *         };
  *       }
  *     }
  *     message GetMessageRequest {
  *       message SubMessage {
  *         string subfield = 1;
  *       }
  *       string message_id = 1; // Mapped to URL path.
  *       int64 revision = 2;    // Mapped to URL query parameter `revision`.
  *       SubMessage sub = 3;    // Mapped to URL query parameter `sub.subfield`.
  *     }
  *
  * This enables a HTTP JSON to RPC mapping as below:
  *
  * HTTP | gRPC
  * -----|-----
  * `GET /v1/messages/123456?revision=2&amp;sub.subfield=foo` |
  * `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield:
  * "foo"))`
  *
  * Note that fields which are mapped to URL query parameters must have a
  * primitive type or a repeated primitive type or a non-repeated message type.
  * In the case of a repeated type, the parameter can be repeated in the URL
  * as `...?param=A&amp;param=B`. In the case of a message type, each field of the
  * message is mapped to a separate parameter, such as
  * `...?foo.a=A&amp;foo.b=B&amp;foo.c=C`.
  *
  * For HTTP methods that allow a request body, the `body` field
  * specifies the mapping. Consider a REST update method on the
  * message resource collection:
  *
  *     service Messaging {
  *       rpc UpdateMessage(UpdateMessageRequest) returns (Message) {
  *         option (google.api.http) = {
  *           patch: "/v1/messages/{message_id}"
  *           body: "message"
  *         };
  *       }
  *     }
  *     message UpdateMessageRequest {
  *       string message_id = 1; // mapped to the URL
  *       Message message = 2;   // mapped to the body
  *     }
  *
  * The following HTTP JSON to RPC mapping is enabled, where the
  * representation of the JSON in the request body is determined by
  * protos JSON encoding:
  *
  * HTTP | gRPC
  * -----|-----
  * `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id:
  * "123456" message { text: "Hi!" })`
  *
  * The special name `*` can be used in the body mapping to define that
  * every field not bound by the path template should be mapped to the
  * request body.  This enables the following alternative definition of
  * the update method:
  *
  *     service Messaging {
  *       rpc UpdateMessage(Message) returns (Message) {
  *         option (google.api.http) = {
  *           patch: "/v1/messages/{message_id}"
  *           body: "*"
  *         };
  *       }
  *     }
  *     message Message {
  *       string message_id = 1;
  *       string text = 2;
  *     }
  *
  *
  * The following HTTP JSON to RPC mapping is enabled:
  *
  * HTTP | gRPC
  * -----|-----
  * `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id:
  * "123456" text: "Hi!")`
  *
  * Note that when using `*` in the body mapping, it is not possible to
  * have HTTP parameters, as all fields not bound by the path end in
  * the body. This makes this option more rarely used in practice when
  * defining REST APIs. The common usage of `*` is in custom methods
  * which don't use the URL at all for transferring data.
  *
  * It is possible to define multiple HTTP methods for one RPC by using
  * the `additional_bindings` option. Example:
  *
  *     service Messaging {
  *       rpc GetMessage(GetMessageRequest) returns (Message) {
  *         option (google.api.http) = {
  *           get: "/v1/messages/{message_id}"
  *           additional_bindings {
  *             get: "/v1/users/{user_id}/messages/{message_id}"
  *           }
  *         };
  *       }
  *     }
  *     message GetMessageRequest {
  *       string message_id = 1;
  *       string user_id = 2;
  *     }
  *
  * This enables the following two alternative HTTP JSON to RPC mappings:
  *
  * HTTP | gRPC
  * -----|-----
  * `GET /v1/messages/123456` | `GetMessage(message_id: "123456")`
  * `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id:
  * "123456")`
  *
  * ## Rules for HTTP mapping
  *
  * 1. Leaf request fields (recursive expansion nested messages in the request
  *    message) are classified into three categories:
  *    - Fields referred by the path template. They are passed via the URL path.
  *    - Fields referred by the [HttpRule.body][google.api.HttpRule.body]. They are passed via the HTTP
  *      request body.
  *    - All other fields are passed via the URL query parameters, and the
  *      parameter name is the field path in the request message. A repeated
  *      field can be represented as multiple query parameters under the same
  *      name.
  *  2. If [HttpRule.body][google.api.HttpRule.body] is "*", there is no URL query parameter, all fields
  *     are passed via URL path and HTTP request body.
  *  3. If [HttpRule.body][google.api.HttpRule.body] is omitted, there is no HTTP request body, all
  *     fields are passed via URL path and URL query parameters.
  *
  * ### Path template syntax
  *
  *     Template = "/" Segments [ Verb ] ;
  *     Segments = Segment { "/" Segment } ;
  *     Segment  = "*" | "**" | LITERAL | Variable ;
  *     Variable = "{" FieldPath [ "=" Segments ] "}" ;
  *     FieldPath = IDENT { "." IDENT } ;
  *     Verb     = ":" LITERAL ;
  *
  * The syntax `*` matches a single URL path segment. The syntax `**` matches
  * zero or more URL path segments, which must be the last part of the URL path
  * except the `Verb`.
  *
  * The syntax `Variable` matches part of the URL path as specified by its
  * template. A variable template must not contain other variables. If a variable
  * matches a single path segment, its template may be omitted, e.g. `{var}`
  * is equivalent to `{var=*}`.
  *
  * The syntax `LITERAL` matches literal text in the URL path. If the `LITERAL`
  * contains any reserved character, such characters should be percent-encoded
  * before the matching.
  *
  * If a variable contains exactly one path segment, such as `"{var}"` or
  * `"{var=*}"`, when such a variable is expanded into a URL path on the client
  * side, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. The
  * server side does the reverse decoding. Such variables show up in the
  * [Discovery
  * Document](https://developers.google.com/discovery/v1/reference/apis) as
  * `{var}`.
  *
  * If a variable contains multiple path segments, such as `"{var=foo/&#42;}"`
  * or `"{var=**}"`, when such a variable is expanded into a URL path on the
  * client side, all characters except `[-_.~/0-9a-zA-Z]` are percent-encoded.
  * The server side does the reverse decoding, except "%2F" and "%2f" are left
  * unchanged. Such variables show up in the
  * [Discovery
  * Document](https://developers.google.com/discovery/v1/reference/apis) as
  * `{+var}`.
  *
  * ## Using gRPC API Service Configuration
  *
  * gRPC API Service Configuration (service config) is a configuration language
  * for configuring a gRPC service to become a user-facing product. The
  * service config is simply the YAML representation of the `google.api.Service`
  * proto message.
  *
  * As an alternative to annotating your proto file, you can configure gRPC
  * transcoding in your service config YAML files. You do this by specifying a
  * `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same
  * effect as the proto annotation. This can be particularly useful if you
  * have a proto that is reused in multiple services. Note that any transcoding
  * specified in the service config will override any matching transcoding
  * configuration in the proto.
  *
  * Example:
  *
  *     http:
  *       rules:
  *         # Selects a gRPC method and applies HttpRule to it.
  *         - selector: example.v1.Messaging.GetMessage
  *           get: /v1/messages/{message_id}/{sub.subfield}
  *
  * ## Special notes
  *
  * When gRPC Transcoding is used to map a gRPC to JSON REST endpoints, the
  * proto to JSON conversion must follow the [proto3
  * specification](https://developers.google.com/protocol-buffers/docs/proto3#json).
  *
  * While the single segment variable follows the semantics of
  * [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String
  * Expansion, the multi segment variable **does not** follow RFC 6570 Section
  * 3.2.3 Reserved Expansion. The reason is that the Reserved Expansion
  * does not expand special characters like `?` and `#`, which would lead
  * to invalid URLs. As the result, gRPC Transcoding uses a custom encoding
  * for multi segment variables.
  *
  * The path variables **must not** refer to any repeated or mapped field,
  * because client libraries are not capable of handling such variable expansion.
  *
  * The path variables **must not** capture the leading "/" character. The reason
  * is that the most common use case "{var}" does not capture the leading "/"
  * character. For consistency, all path variables must share the same behavior.
  *
  * Repeated message fields must not be mapped to URL query parameters, because
  * no client library can support such complicated mapping.
  *
  * If an API needs to use a JSON array for request or response body, it can map
  * the request or response body to a repeated field. However, some gRPC
  * Transcoding implementations may not support this feature.
  *
  * @param selector
  *   Selects a method to which this rule applies.
  *  
  *   Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
  * @param body
  *   The name of the request field whose value is mapped to the HTTP request
  *   body, or `*` for mapping all request fields not captured by the path
  *   pattern to the HTTP body, or omitted for not having any HTTP request body.
  *  
  *   NOTE: the referred field must be present at the top-level of the request
  *   message type.
  * @param responseBody
  *   Optional. The name of the response field whose value is mapped to the HTTP
  *   response body. When omitted, the entire response message will be used
  *   as the HTTP response body.
  *  
  *   NOTE: The referred field must be present at the top-level of the response
  *   message type.
  * @param additionalBindings
  *   Additional HTTP bindings for the selector. Nested bindings must
  *   not contain an `additional_bindings` field themselves (that is,
  *   the nesting may only be one level deep).
  */
@SerialVersionUID(0L)
final case class HttpRule(
    selector: _root_.scala.Predef.String = "",
    pattern: com.google.api.HttpRule.Pattern = com.google.api.HttpRule.Pattern.Empty,
    body: _root_.scala.Predef.String = "",
    responseBody: _root_.scala.Predef.String = "",
    additionalBindings: _root_.scala.Seq[com.google.api.HttpRule] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[HttpRule] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = selector
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (pattern.get.isDefined) {
        val __value = pattern.get.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (pattern.put.isDefined) {
        val __value = pattern.put.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      if (pattern.post.isDefined) {
        val __value = pattern.post.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      };
      if (pattern.delete.isDefined) {
        val __value = pattern.delete.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      };
      if (pattern.patch.isDefined) {
        val __value = pattern.patch.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      };
      if (pattern.custom.isDefined) {
        val __value = pattern.custom.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = body
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = responseBody
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, __value)
        }
      };
      additionalBindings.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = selector
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      pattern.get.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      pattern.put.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      pattern.post.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      pattern.delete.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      pattern.patch.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      {
        val __v = body
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      pattern.custom.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      additionalBindings.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = responseBody
        if (!__v.isEmpty) {
          _output__.writeString(12, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withSelector(__v: _root_.scala.Predef.String): HttpRule = copy(selector = __v)
    def getGet: _root_.scala.Predef.String = pattern.get.getOrElse("")
    def withGet(__v: _root_.scala.Predef.String): HttpRule = copy(pattern = com.google.api.HttpRule.Pattern.Get(__v))
    def getPut: _root_.scala.Predef.String = pattern.put.getOrElse("")
    def withPut(__v: _root_.scala.Predef.String): HttpRule = copy(pattern = com.google.api.HttpRule.Pattern.Put(__v))
    def getPost: _root_.scala.Predef.String = pattern.post.getOrElse("")
    def withPost(__v: _root_.scala.Predef.String): HttpRule = copy(pattern = com.google.api.HttpRule.Pattern.Post(__v))
    def getDelete: _root_.scala.Predef.String = pattern.delete.getOrElse("")
    def withDelete(__v: _root_.scala.Predef.String): HttpRule = copy(pattern = com.google.api.HttpRule.Pattern.Delete(__v))
    def getPatch: _root_.scala.Predef.String = pattern.patch.getOrElse("")
    def withPatch(__v: _root_.scala.Predef.String): HttpRule = copy(pattern = com.google.api.HttpRule.Pattern.Patch(__v))
    def getCustom: com.google.api.CustomHttpPattern = pattern.custom.getOrElse(com.google.api.CustomHttpPattern.defaultInstance)
    def withCustom(__v: com.google.api.CustomHttpPattern): HttpRule = copy(pattern = com.google.api.HttpRule.Pattern.Custom(__v))
    def withBody(__v: _root_.scala.Predef.String): HttpRule = copy(body = __v)
    def withResponseBody(__v: _root_.scala.Predef.String): HttpRule = copy(responseBody = __v)
    def clearAdditionalBindings = copy(additionalBindings = _root_.scala.Seq.empty)
    def addAdditionalBindings(__vs: com.google.api.HttpRule *): HttpRule = addAllAdditionalBindings(__vs)
    def addAllAdditionalBindings(__vs: Iterable[com.google.api.HttpRule]): HttpRule = copy(additionalBindings = additionalBindings ++ __vs)
    def withAdditionalBindings(__v: _root_.scala.Seq[com.google.api.HttpRule]): HttpRule = copy(additionalBindings = __v)
    def clearPattern: HttpRule = copy(pattern = com.google.api.HttpRule.Pattern.Empty)
    def withPattern(__v: com.google.api.HttpRule.Pattern): HttpRule = copy(pattern = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = selector
          if (__t != "") __t else null
        }
        case 2 => pattern.get.orNull
        case 3 => pattern.put.orNull
        case 4 => pattern.post.orNull
        case 5 => pattern.delete.orNull
        case 6 => pattern.patch.orNull
        case 8 => pattern.custom.orNull
        case 7 => {
          val __t = body
          if (__t != "") __t else null
        }
        case 12 => {
          val __t = responseBody
          if (__t != "") __t else null
        }
        case 11 => additionalBindings
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(selector)
        case 2 => pattern.get.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => pattern.put.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => pattern.post.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => pattern.delete.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => pattern.patch.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => pattern.custom.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PString(body)
        case 12 => _root_.scalapb.descriptors.PString(responseBody)
        case 11 => _root_.scalapb.descriptors.PRepeated(additionalBindings.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.google.api.HttpRule.type = com.google.api.HttpRule
    // @@protoc_insertion_point(GeneratedMessage[google.api.HttpRule])
}

object HttpRule extends scalapb.GeneratedMessageCompanion[com.google.api.HttpRule] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.api.HttpRule] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.api.HttpRule = {
    var __selector: _root_.scala.Predef.String = ""
    var __body: _root_.scala.Predef.String = ""
    var __responseBody: _root_.scala.Predef.String = ""
    val __additionalBindings: _root_.scala.collection.immutable.VectorBuilder[com.google.api.HttpRule] = new _root_.scala.collection.immutable.VectorBuilder[com.google.api.HttpRule]
    var __pattern: com.google.api.HttpRule.Pattern = com.google.api.HttpRule.Pattern.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __selector = _input__.readStringRequireUtf8()
        case 18 =>
          __pattern = com.google.api.HttpRule.Pattern.Get(_input__.readStringRequireUtf8())
        case 26 =>
          __pattern = com.google.api.HttpRule.Pattern.Put(_input__.readStringRequireUtf8())
        case 34 =>
          __pattern = com.google.api.HttpRule.Pattern.Post(_input__.readStringRequireUtf8())
        case 42 =>
          __pattern = com.google.api.HttpRule.Pattern.Delete(_input__.readStringRequireUtf8())
        case 50 =>
          __pattern = com.google.api.HttpRule.Pattern.Patch(_input__.readStringRequireUtf8())
        case 66 =>
          __pattern = com.google.api.HttpRule.Pattern.Custom(__pattern.custom.fold(_root_.scalapb.LiteParser.readMessage[com.google.api.CustomHttpPattern](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __body = _input__.readStringRequireUtf8()
        case 98 =>
          __responseBody = _input__.readStringRequireUtf8()
        case 90 =>
          __additionalBindings += _root_.scalapb.LiteParser.readMessage[com.google.api.HttpRule](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.google.api.HttpRule(
        selector = __selector,
        body = __body,
        responseBody = __responseBody,
        additionalBindings = __additionalBindings.result(),
        pattern = __pattern,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.api.HttpRule] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.api.HttpRule(
        selector = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        body = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        responseBody = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        additionalBindings = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[com.google.api.HttpRule]]).getOrElse(_root_.scala.Seq.empty),
        pattern = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(com.google.api.HttpRule.Pattern.Get(_))
            .orElse[com.google.api.HttpRule.Pattern](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(com.google.api.HttpRule.Pattern.Put(_)))
            .orElse[com.google.api.HttpRule.Pattern](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(com.google.api.HttpRule.Pattern.Post(_)))
            .orElse[com.google.api.HttpRule.Pattern](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(com.google.api.HttpRule.Pattern.Delete(_)))
            .orElse[com.google.api.HttpRule.Pattern](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(com.google.api.HttpRule.Pattern.Patch(_)))
            .orElse[com.google.api.HttpRule.Pattern](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[com.google.api.CustomHttpPattern]]).map(com.google.api.HttpRule.Pattern.Custom(_)))
            .getOrElse(com.google.api.HttpRule.Pattern.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = HttpProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = HttpProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 8 => __out = com.google.api.CustomHttpPattern
      case 11 => __out = com.google.api.HttpRule
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.api.HttpRule(
    selector = "",
    body = "",
    responseBody = "",
    additionalBindings = _root_.scala.Seq.empty,
    pattern = com.google.api.HttpRule.Pattern.Empty
  )
  sealed trait Pattern extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isGet: _root_.scala.Boolean = false
    def isPut: _root_.scala.Boolean = false
    def isPost: _root_.scala.Boolean = false
    def isDelete: _root_.scala.Boolean = false
    def isPatch: _root_.scala.Boolean = false
    def isCustom: _root_.scala.Boolean = false
    def get: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def put: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def post: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def delete: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def patch: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def custom: _root_.scala.Option[com.google.api.CustomHttpPattern] = _root_.scala.None
  }
  object Pattern {
    @SerialVersionUID(0L)
    case object Empty extends com.google.api.HttpRule.Pattern {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Get(value: _root_.scala.Predef.String) extends com.google.api.HttpRule.Pattern {
      type ValueType = _root_.scala.Predef.String
      override def isGet: _root_.scala.Boolean = true
      override def get: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Put(value: _root_.scala.Predef.String) extends com.google.api.HttpRule.Pattern {
      type ValueType = _root_.scala.Predef.String
      override def isPut: _root_.scala.Boolean = true
      override def put: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Post(value: _root_.scala.Predef.String) extends com.google.api.HttpRule.Pattern {
      type ValueType = _root_.scala.Predef.String
      override def isPost: _root_.scala.Boolean = true
      override def post: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Delete(value: _root_.scala.Predef.String) extends com.google.api.HttpRule.Pattern {
      type ValueType = _root_.scala.Predef.String
      override def isDelete: _root_.scala.Boolean = true
      override def delete: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class Patch(value: _root_.scala.Predef.String) extends com.google.api.HttpRule.Pattern {
      type ValueType = _root_.scala.Predef.String
      override def isPatch: _root_.scala.Boolean = true
      override def patch: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class Custom(value: com.google.api.CustomHttpPattern) extends com.google.api.HttpRule.Pattern {
      type ValueType = com.google.api.CustomHttpPattern
      override def isCustom: _root_.scala.Boolean = true
      override def custom: _root_.scala.Option[com.google.api.CustomHttpPattern] = Some(value)
      override def number: _root_.scala.Int = 8
    }
  }
  implicit class HttpRuleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.api.HttpRule]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.api.HttpRule](_l) {
    def selector: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.selector)((c_, f_) => c_.copy(selector = f_))
    def get: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getGet)((c_, f_) => c_.copy(pattern = com.google.api.HttpRule.Pattern.Get(f_)))
    def put: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPut)((c_, f_) => c_.copy(pattern = com.google.api.HttpRule.Pattern.Put(f_)))
    def post: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPost)((c_, f_) => c_.copy(pattern = com.google.api.HttpRule.Pattern.Post(f_)))
    def delete: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDelete)((c_, f_) => c_.copy(pattern = com.google.api.HttpRule.Pattern.Delete(f_)))
    def patch: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPatch)((c_, f_) => c_.copy(pattern = com.google.api.HttpRule.Pattern.Patch(f_)))
    def custom: _root_.scalapb.lenses.Lens[UpperPB, com.google.api.CustomHttpPattern] = field(_.getCustom)((c_, f_) => c_.copy(pattern = com.google.api.HttpRule.Pattern.Custom(f_)))
    def body: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.body)((c_, f_) => c_.copy(body = f_))
    def responseBody: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.responseBody)((c_, f_) => c_.copy(responseBody = f_))
    def additionalBindings: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.google.api.HttpRule]] = field(_.additionalBindings)((c_, f_) => c_.copy(additionalBindings = f_))
    def pattern: _root_.scalapb.lenses.Lens[UpperPB, com.google.api.HttpRule.Pattern] = field(_.pattern)((c_, f_) => c_.copy(pattern = f_))
  }
  final val SELECTOR_FIELD_NUMBER = 1
  final val GET_FIELD_NUMBER = 2
  final val PUT_FIELD_NUMBER = 3
  final val POST_FIELD_NUMBER = 4
  final val DELETE_FIELD_NUMBER = 5
  final val PATCH_FIELD_NUMBER = 6
  final val CUSTOM_FIELD_NUMBER = 8
  final val BODY_FIELD_NUMBER = 7
  final val RESPONSE_BODY_FIELD_NUMBER = 12
  final val ADDITIONAL_BINDINGS_FIELD_NUMBER = 11
  def of(
    selector: _root_.scala.Predef.String,
    pattern: com.google.api.HttpRule.Pattern,
    body: _root_.scala.Predef.String,
    responseBody: _root_.scala.Predef.String,
    additionalBindings: _root_.scala.Seq[com.google.api.HttpRule]
  ): _root_.com.google.api.HttpRule = _root_.com.google.api.HttpRule(
    selector,
    pattern,
    body,
    responseBody,
    additionalBindings
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[google.api.HttpRule])
}
