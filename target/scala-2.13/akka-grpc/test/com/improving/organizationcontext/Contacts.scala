// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.improving.organizationcontext

@SerialVersionUID(0L)
final case class Contacts(
    primaryContacts: _root_.scala.Option[com.improving.MemberId] = _root_.scala.None,
    billingContacts: _root_.scala.Seq[com.improving.MemberId] = _root_.scala.Seq.empty,
    distributionContacts: _root_.scala.Seq[com.improving.MemberId] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Contacts] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (primaryContacts.isDefined) {
        val __value = primaryContacts.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      billingContacts.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      distributionContacts.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      primaryContacts.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      billingContacts.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      distributionContacts.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getPrimaryContacts: com.improving.MemberId = primaryContacts.getOrElse(com.improving.MemberId.defaultInstance)
    def clearPrimaryContacts: Contacts = copy(primaryContacts = _root_.scala.None)
    def withPrimaryContacts(__v: com.improving.MemberId): Contacts = copy(primaryContacts = Option(__v))
    def clearBillingContacts = copy(billingContacts = _root_.scala.Seq.empty)
    def addBillingContacts(__vs: com.improving.MemberId *): Contacts = addAllBillingContacts(__vs)
    def addAllBillingContacts(__vs: Iterable[com.improving.MemberId]): Contacts = copy(billingContacts = billingContacts ++ __vs)
    def withBillingContacts(__v: _root_.scala.Seq[com.improving.MemberId]): Contacts = copy(billingContacts = __v)
    def clearDistributionContacts = copy(distributionContacts = _root_.scala.Seq.empty)
    def addDistributionContacts(__vs: com.improving.MemberId *): Contacts = addAllDistributionContacts(__vs)
    def addAllDistributionContacts(__vs: Iterable[com.improving.MemberId]): Contacts = copy(distributionContacts = distributionContacts ++ __vs)
    def withDistributionContacts(__v: _root_.scala.Seq[com.improving.MemberId]): Contacts = copy(distributionContacts = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => primaryContacts.orNull
        case 2 => billingContacts
        case 3 => distributionContacts
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => primaryContacts.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(billingContacts.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(distributionContacts.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.improving.organizationcontext.Contacts.type = com.improving.organizationcontext.Contacts
    // @@protoc_insertion_point(GeneratedMessage[com.improving.organizationcontext.Contacts])
}

object Contacts extends scalapb.GeneratedMessageCompanion[com.improving.organizationcontext.Contacts] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.improving.organizationcontext.Contacts] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.improving.organizationcontext.Contacts = {
    var __primaryContacts: _root_.scala.Option[com.improving.MemberId] = _root_.scala.None
    val __billingContacts: _root_.scala.collection.immutable.VectorBuilder[com.improving.MemberId] = new _root_.scala.collection.immutable.VectorBuilder[com.improving.MemberId]
    val __distributionContacts: _root_.scala.collection.immutable.VectorBuilder[com.improving.MemberId] = new _root_.scala.collection.immutable.VectorBuilder[com.improving.MemberId]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __primaryContacts = Option(__primaryContacts.fold(_root_.scalapb.LiteParser.readMessage[com.improving.MemberId](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __billingContacts += _root_.scalapb.LiteParser.readMessage[com.improving.MemberId](_input__)
        case 26 =>
          __distributionContacts += _root_.scalapb.LiteParser.readMessage[com.improving.MemberId](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.improving.organizationcontext.Contacts(
        primaryContacts = __primaryContacts,
        billingContacts = __billingContacts.result(),
        distributionContacts = __distributionContacts.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.improving.organizationcontext.Contacts] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.improving.organizationcontext.Contacts(
        primaryContacts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.improving.MemberId]]),
        billingContacts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[com.improving.MemberId]]).getOrElse(_root_.scala.Seq.empty),
        distributionContacts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[com.improving.MemberId]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = OrganizationContextDomainProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = OrganizationContextDomainProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.improving.MemberId
      case 2 => __out = com.improving.MemberId
      case 3 => __out = com.improving.MemberId
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.improving.organizationcontext.Contacts(
    primaryContacts = _root_.scala.None,
    billingContacts = _root_.scala.Seq.empty,
    distributionContacts = _root_.scala.Seq.empty
  )
  implicit class ContactsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.improving.organizationcontext.Contacts]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.improving.organizationcontext.Contacts](_l) {
    def primaryContacts: _root_.scalapb.lenses.Lens[UpperPB, com.improving.MemberId] = field(_.getPrimaryContacts)((c_, f_) => c_.copy(primaryContacts = Option(f_)))
    def optionalPrimaryContacts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.MemberId]] = field(_.primaryContacts)((c_, f_) => c_.copy(primaryContacts = f_))
    def billingContacts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.improving.MemberId]] = field(_.billingContacts)((c_, f_) => c_.copy(billingContacts = f_))
    def distributionContacts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.improving.MemberId]] = field(_.distributionContacts)((c_, f_) => c_.copy(distributionContacts = f_))
  }
  final val PRIMARYCONTACTS_FIELD_NUMBER = 1
  final val BILLINGCONTACTS_FIELD_NUMBER = 2
  final val DISTRIBUTIONCONTACTS_FIELD_NUMBER = 3
  def of(
    primaryContacts: _root_.scala.Option[com.improving.MemberId],
    billingContacts: _root_.scala.Seq[com.improving.MemberId],
    distributionContacts: _root_.scala.Seq[com.improving.MemberId]
  ): _root_.com.improving.organizationcontext.Contacts = _root_.com.improving.organizationcontext.Contacts(
    primaryContacts,
    billingContacts,
    distributionContacts
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[com.improving.organizationcontext.Contacts])
}
