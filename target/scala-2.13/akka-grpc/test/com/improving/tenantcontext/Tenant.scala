// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.improving.tenantcontext

@SerialVersionUID(0L)
final case class Tenant(
    state: com.improving.tenantcontext.Tenant.State = com.improving.tenantcontext.Tenant.State.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Tenant] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (state.activeTenant.isDefined) {
        val __value = state.activeTenant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (state.draftTenant.isDefined) {
        val __value = state.draftTenant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (state.suspendedTenant.isDefined) {
        val __value = state.suspendedTenant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      state.activeTenant.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      state.draftTenant.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      state.suspendedTenant.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getActiveTenant: com.improving.tenantcontext.ActiveTenant = state.activeTenant.getOrElse(com.improving.tenantcontext.ActiveTenant.defaultInstance)
    def withActiveTenant(__v: com.improving.tenantcontext.ActiveTenant): Tenant = copy(state = com.improving.tenantcontext.Tenant.State.ActiveTenant(__v))
    def getDraftTenant: com.improving.tenantcontext.DraftTenant = state.draftTenant.getOrElse(com.improving.tenantcontext.DraftTenant.defaultInstance)
    def withDraftTenant(__v: com.improving.tenantcontext.DraftTenant): Tenant = copy(state = com.improving.tenantcontext.Tenant.State.DraftTenant(__v))
    def getSuspendedTenant: com.improving.tenantcontext.SuspendedTenant = state.suspendedTenant.getOrElse(com.improving.tenantcontext.SuspendedTenant.defaultInstance)
    def withSuspendedTenant(__v: com.improving.tenantcontext.SuspendedTenant): Tenant = copy(state = com.improving.tenantcontext.Tenant.State.SuspendedTenant(__v))
    def clearState: Tenant = copy(state = com.improving.tenantcontext.Tenant.State.Empty)
    def withState(__v: com.improving.tenantcontext.Tenant.State): Tenant = copy(state = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => state.activeTenant.orNull
        case 2 => state.draftTenant.orNull
        case 3 => state.suspendedTenant.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => state.activeTenant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => state.draftTenant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => state.suspendedTenant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.improving.tenantcontext.Tenant.type = com.improving.tenantcontext.Tenant
    // @@protoc_insertion_point(GeneratedMessage[com.improving.tenantcontext.Tenant])
}

object Tenant extends scalapb.GeneratedMessageCompanion[com.improving.tenantcontext.Tenant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.improving.tenantcontext.Tenant] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.improving.tenantcontext.Tenant = {
    var __state: com.improving.tenantcontext.Tenant.State = com.improving.tenantcontext.Tenant.State.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __state = com.improving.tenantcontext.Tenant.State.ActiveTenant(__state.activeTenant.fold(_root_.scalapb.LiteParser.readMessage[com.improving.tenantcontext.ActiveTenant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __state = com.improving.tenantcontext.Tenant.State.DraftTenant(__state.draftTenant.fold(_root_.scalapb.LiteParser.readMessage[com.improving.tenantcontext.DraftTenant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __state = com.improving.tenantcontext.Tenant.State.SuspendedTenant(__state.suspendedTenant.fold(_root_.scalapb.LiteParser.readMessage[com.improving.tenantcontext.SuspendedTenant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.improving.tenantcontext.Tenant(
        state = __state,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.improving.tenantcontext.Tenant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.improving.tenantcontext.Tenant(
        state = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.improving.tenantcontext.ActiveTenant]]).map(com.improving.tenantcontext.Tenant.State.ActiveTenant(_))
            .orElse[com.improving.tenantcontext.Tenant.State](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.improving.tenantcontext.DraftTenant]]).map(com.improving.tenantcontext.Tenant.State.DraftTenant(_)))
            .orElse[com.improving.tenantcontext.Tenant.State](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.improving.tenantcontext.SuspendedTenant]]).map(com.improving.tenantcontext.Tenant.State.SuspendedTenant(_)))
            .getOrElse(com.improving.tenantcontext.Tenant.State.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TenantContextDomainProto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TenantContextDomainProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.improving.tenantcontext.ActiveTenant
      case 2 => __out = com.improving.tenantcontext.DraftTenant
      case 3 => __out = com.improving.tenantcontext.SuspendedTenant
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.improving.tenantcontext.Tenant(
    state = com.improving.tenantcontext.Tenant.State.Empty
  )
  sealed trait State extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isActiveTenant: _root_.scala.Boolean = false
    def isDraftTenant: _root_.scala.Boolean = false
    def isSuspendedTenant: _root_.scala.Boolean = false
    def activeTenant: _root_.scala.Option[com.improving.tenantcontext.ActiveTenant] = _root_.scala.None
    def draftTenant: _root_.scala.Option[com.improving.tenantcontext.DraftTenant] = _root_.scala.None
    def suspendedTenant: _root_.scala.Option[com.improving.tenantcontext.SuspendedTenant] = _root_.scala.None
  }
  object State {
    @SerialVersionUID(0L)
    case object Empty extends com.improving.tenantcontext.Tenant.State {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class ActiveTenant(value: com.improving.tenantcontext.ActiveTenant) extends com.improving.tenantcontext.Tenant.State {
      type ValueType = com.improving.tenantcontext.ActiveTenant
      override def isActiveTenant: _root_.scala.Boolean = true
      override def activeTenant: _root_.scala.Option[com.improving.tenantcontext.ActiveTenant] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class DraftTenant(value: com.improving.tenantcontext.DraftTenant) extends com.improving.tenantcontext.Tenant.State {
      type ValueType = com.improving.tenantcontext.DraftTenant
      override def isDraftTenant: _root_.scala.Boolean = true
      override def draftTenant: _root_.scala.Option[com.improving.tenantcontext.DraftTenant] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class SuspendedTenant(value: com.improving.tenantcontext.SuspendedTenant) extends com.improving.tenantcontext.Tenant.State {
      type ValueType = com.improving.tenantcontext.SuspendedTenant
      override def isSuspendedTenant: _root_.scala.Boolean = true
      override def suspendedTenant: _root_.scala.Option[com.improving.tenantcontext.SuspendedTenant] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class TenantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.improving.tenantcontext.Tenant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.improving.tenantcontext.Tenant](_l) {
    def activeTenant: _root_.scalapb.lenses.Lens[UpperPB, com.improving.tenantcontext.ActiveTenant] = field(_.getActiveTenant)((c_, f_) => c_.copy(state = com.improving.tenantcontext.Tenant.State.ActiveTenant(f_)))
    def draftTenant: _root_.scalapb.lenses.Lens[UpperPB, com.improving.tenantcontext.DraftTenant] = field(_.getDraftTenant)((c_, f_) => c_.copy(state = com.improving.tenantcontext.Tenant.State.DraftTenant(f_)))
    def suspendedTenant: _root_.scalapb.lenses.Lens[UpperPB, com.improving.tenantcontext.SuspendedTenant] = field(_.getSuspendedTenant)((c_, f_) => c_.copy(state = com.improving.tenantcontext.Tenant.State.SuspendedTenant(f_)))
    def state: _root_.scalapb.lenses.Lens[UpperPB, com.improving.tenantcontext.Tenant.State] = field(_.state)((c_, f_) => c_.copy(state = f_))
  }
  final val ACTIVETENANT_FIELD_NUMBER = 1
  final val DRAFTTENANT_FIELD_NUMBER = 2
  final val SUSPENDEDTENANT_FIELD_NUMBER = 3
  def of(
    state: com.improving.tenantcontext.Tenant.State
  ): _root_.com.improving.tenantcontext.Tenant = _root_.com.improving.tenantcontext.Tenant(
    state
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[com.improving.tenantcontext.Tenant])
}
