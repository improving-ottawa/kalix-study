// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.improving.tenantcontext

@SerialVersionUID(0L)
final case class PrimaryContactUpdated(
    tenantId: _root_.scala.Option[com.improving.TenantId] = _root_.scala.None,
    oldContact: _root_.scala.Option[com.improving.Contact] = _root_.scala.None,
    newContact: _root_.scala.Option[com.improving.Contact] = _root_.scala.None,
    meta: _root_.scala.Option[com.improving.tenantcontext.MetaInfo] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PrimaryContactUpdated] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (tenantId.isDefined) {
        val __value = tenantId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (oldContact.isDefined) {
        val __value = oldContact.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (newContact.isDefined) {
        val __value = newContact.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (meta.isDefined) {
        val __value = meta.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      tenantId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      oldContact.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      newContact.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      meta.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getTenantId: com.improving.TenantId = tenantId.getOrElse(com.improving.TenantId.defaultInstance)
    def clearTenantId: PrimaryContactUpdated = copy(tenantId = _root_.scala.None)
    def withTenantId(__v: com.improving.TenantId): PrimaryContactUpdated = copy(tenantId = Option(__v))
    def getOldContact: com.improving.Contact = oldContact.getOrElse(com.improving.Contact.defaultInstance)
    def clearOldContact: PrimaryContactUpdated = copy(oldContact = _root_.scala.None)
    def withOldContact(__v: com.improving.Contact): PrimaryContactUpdated = copy(oldContact = Option(__v))
    def getNewContact: com.improving.Contact = newContact.getOrElse(com.improving.Contact.defaultInstance)
    def clearNewContact: PrimaryContactUpdated = copy(newContact = _root_.scala.None)
    def withNewContact(__v: com.improving.Contact): PrimaryContactUpdated = copy(newContact = Option(__v))
    def getMeta: com.improving.tenantcontext.MetaInfo = meta.getOrElse(com.improving.tenantcontext.MetaInfo.defaultInstance)
    def clearMeta: PrimaryContactUpdated = copy(meta = _root_.scala.None)
    def withMeta(__v: com.improving.tenantcontext.MetaInfo): PrimaryContactUpdated = copy(meta = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => tenantId.orNull
        case 2 => oldContact.orNull
        case 3 => newContact.orNull
        case 4 => meta.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => tenantId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => oldContact.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => newContact.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => meta.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.improving.tenantcontext.PrimaryContactUpdated.type = com.improving.tenantcontext.PrimaryContactUpdated
    // @@protoc_insertion_point(GeneratedMessage[com.improving.tenantcontext.PrimaryContactUpdated])
}

object PrimaryContactUpdated extends scalapb.GeneratedMessageCompanion[com.improving.tenantcontext.PrimaryContactUpdated] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.improving.tenantcontext.PrimaryContactUpdated] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.improving.tenantcontext.PrimaryContactUpdated = {
    var __tenantId: _root_.scala.Option[com.improving.TenantId] = _root_.scala.None
    var __oldContact: _root_.scala.Option[com.improving.Contact] = _root_.scala.None
    var __newContact: _root_.scala.Option[com.improving.Contact] = _root_.scala.None
    var __meta: _root_.scala.Option[com.improving.tenantcontext.MetaInfo] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __tenantId = Option(__tenantId.fold(_root_.scalapb.LiteParser.readMessage[com.improving.TenantId](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __oldContact = Option(__oldContact.fold(_root_.scalapb.LiteParser.readMessage[com.improving.Contact](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __newContact = Option(__newContact.fold(_root_.scalapb.LiteParser.readMessage[com.improving.Contact](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __meta = Option(__meta.fold(_root_.scalapb.LiteParser.readMessage[com.improving.tenantcontext.MetaInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.improving.tenantcontext.PrimaryContactUpdated(
        tenantId = __tenantId,
        oldContact = __oldContact,
        newContact = __newContact,
        meta = __meta,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.improving.tenantcontext.PrimaryContactUpdated] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.improving.tenantcontext.PrimaryContactUpdated(
        tenantId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.improving.TenantId]]),
        oldContact = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.improving.Contact]]),
        newContact = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.improving.Contact]]),
        meta = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.improving.tenantcontext.MetaInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TenantContextDomainProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TenantContextDomainProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.improving.TenantId
      case 2 => __out = com.improving.Contact
      case 3 => __out = com.improving.Contact
      case 4 => __out = com.improving.tenantcontext.MetaInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.improving.tenantcontext.PrimaryContactUpdated(
    tenantId = _root_.scala.None,
    oldContact = _root_.scala.None,
    newContact = _root_.scala.None,
    meta = _root_.scala.None
  )
  implicit class PrimaryContactUpdatedLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.improving.tenantcontext.PrimaryContactUpdated]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.improving.tenantcontext.PrimaryContactUpdated](_l) {
    def tenantId: _root_.scalapb.lenses.Lens[UpperPB, com.improving.TenantId] = field(_.getTenantId)((c_, f_) => c_.copy(tenantId = Option(f_)))
    def optionalTenantId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.TenantId]] = field(_.tenantId)((c_, f_) => c_.copy(tenantId = f_))
    def oldContact: _root_.scalapb.lenses.Lens[UpperPB, com.improving.Contact] = field(_.getOldContact)((c_, f_) => c_.copy(oldContact = Option(f_)))
    def optionalOldContact: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.Contact]] = field(_.oldContact)((c_, f_) => c_.copy(oldContact = f_))
    def newContact: _root_.scalapb.lenses.Lens[UpperPB, com.improving.Contact] = field(_.getNewContact)((c_, f_) => c_.copy(newContact = Option(f_)))
    def optionalNewContact: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.Contact]] = field(_.newContact)((c_, f_) => c_.copy(newContact = f_))
    def meta: _root_.scalapb.lenses.Lens[UpperPB, com.improving.tenantcontext.MetaInfo] = field(_.getMeta)((c_, f_) => c_.copy(meta = Option(f_)))
    def optionalMeta: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.improving.tenantcontext.MetaInfo]] = field(_.meta)((c_, f_) => c_.copy(meta = f_))
  }
  final val TENANTID_FIELD_NUMBER = 1
  final val OLDCONTACT_FIELD_NUMBER = 2
  final val NEWCONTACT_FIELD_NUMBER = 3
  final val META_FIELD_NUMBER = 4
  def of(
    tenantId: _root_.scala.Option[com.improving.TenantId],
    oldContact: _root_.scala.Option[com.improving.Contact],
    newContact: _root_.scala.Option[com.improving.Contact],
    meta: _root_.scala.Option[com.improving.tenantcontext.MetaInfo]
  ): _root_.com.improving.tenantcontext.PrimaryContactUpdated = _root_.com.improving.tenantcontext.PrimaryContactUpdated(
    tenantId,
    oldContact,
    newContact,
    meta
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[com.improving.tenantcontext.PrimaryContactUpdated])
}
