// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.improving.organization

object OrganizationApiProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.improving.CommonDomainProto,
    com.improving.organizationcontext.OrganizationContextDomainProto,
    com.improving.organizationcontext.organization.OrganizationDomainProto,
    com.google.protobuf.empty.EmptyProto,
    kalix.AnnotationsProto,
    com.google.api.AnnotationsProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.improving.organization.ApiUSPostalCode,
      com.improving.organization.ApiCAPostalCode,
      com.improving.organization.ApiAddress,
      com.improving.organization.ApiInfo,
      com.improving.organization.ApiParent,
      com.improving.organization.ApiMemberId,
      com.improving.organization.ApiContacts,
      com.improving.organization.ApiContactList,
      com.improving.organization.ApiMemberList,
      com.improving.organization.ApiOwnerList,
      com.improving.organization.ApiUpdateInfo,
      com.improving.organization.ApiAddMembersToOrganization,
      com.improving.organization.ApiAddOwnersToOrganization,
      com.improving.organization.ApiEditOrganizationInfo,
      com.improving.organization.ApiEstablishOrganization,
      com.improving.organization.ApiOwnersRemovedFromOrganization,
      com.improving.organization.ApiParentUpdatedOrganization
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cihjb20vaW1wcm92aW5nL2FwaS9vcmdhbml6YXRpb25fYXBpLnByb3RvEhpjb20uaW1wcm92aW5nLm9yZ2FuaXphdGlvbhooY
  29tL2ltcHJvdmluZy9kb21haW4vY29tbW9uX2RvbWFpbi5wcm90bxo2Y29tL2ltcHJvdmluZy9kb21haW4vb3JnYW5pemF0aW9uX
  2NvbnRleHRfZG9tYWluLnByb3RvGi5jb20vaW1wcm92aW5nL2RvbWFpbi9vcmdhbml6YXRpb25fZG9tYWluLnByb3RvGhtnb29nb
  GUvcHJvdG9idWYvZW1wdHkucHJvdG8aF2thbGl4L2Fubm90YXRpb25zLnByb3RvGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb
  3RvIkMKD0FwaVVTUG9zdGFsQ29kZRIwCgtwb3N0YWxfY29kZRgBIAEoCUIP4j8MEgpwb3N0YWxDb2RlUgpwb3N0YWxDb2RlIkMKD
  0FwaUNBUG9zdGFsQ29kZRIwCgtwb3N0YWxfY29kZRgBIAEoCUIP4j8MEgpwb3N0YWxDb2RlUgpwb3N0YWxDb2RlIrADCgpBcGlBZ
  GRyZXNzEiAKBWxpbmUxGAEgASgJQgriPwcSBWxpbmUxUgVsaW5lMRIgCgVsaW5lMhgCIAEoCUIK4j8HEgVsaW5lMlIFbGluZTISH
  QoEY2l0eRgDIAEoCUIJ4j8GEgRjaXR5UgRjaXR5EjgKDXN0YXRlUHJvdmluY2UYBCABKAlCEuI/DxINc3RhdGVQcm92aW5jZVINc
  3RhdGVQcm92aW5jZRImCgdjb3VudHJ5GAUgASgJQgziPwkSB2NvdW50cnlSB2NvdW50cnkSZgoOdXNfcG9zdGFsX2NvZGUYBiABK
  AsyKy5jb20uaW1wcm92aW5nLm9yZ2FuaXphdGlvbi5BcGlVU1Bvc3RhbENvZGVCEeI/DhIMdXNQb3N0YWxDb2RlSABSDHVzUG9zd
  GFsQ29kZRJmCg5jYV9wb3N0YWxfY29kZRgHIAEoCzIrLmNvbS5pbXByb3Zpbmcub3JnYW5pemF0aW9uLkFwaUNBUG9zdGFsQ29kZ
  UIR4j8OEgxjYVBvc3RhbENvZGVIAFIMY2FQb3N0YWxDb2RlQg0KC3Bvc3RhbF9jb2RlIo8CCgdBcGlJbmZvEh0KBG5hbWUYASABK
  AlCCeI/BhIEbmFtZVIEbmFtZRIsCglzaG9ydE5hbWUYAiABKAlCDuI/CxIJc2hvcnROYW1lUglzaG9ydE5hbWUSTgoHYWRkcmVzc
  xgDIAEoCzImLmNvbS5pbXByb3Zpbmcub3JnYW5pemF0aW9uLkFwaUFkZHJlc3NCDOI/CRIHYWRkcmVzc1IHYWRkcmVzcxIsCglpc
  1ByaXZhdGUYBCABKAhCDuI/CxIJaXNQcml2YXRlUglpc1ByaXZhdGUSGgoDdXJsGAUgASgJQgjiPwUSA3VybFIDdXJsEh0KBGxvZ
  28YBiABKAlCCeI/BhIEbG9nb1IEbG9nbyIzCglBcGlQYXJlbnQSJgoGb3JnX2lkGAEgASgJQg/iPwcSBW9yZ0lkwkMCCAFSBW9yZ
  0lkIj4KC0FwaU1lbWJlcklkEi8KCW1lbWJlcl9pZBgBIAEoCUIS4j8KEghtZW1iZXJJZMJDAggBUghtZW1iZXJJZCLXAgoLQXBpQ
  29udGFjdHMSZwoPcHJpbWFyeUNvbnRhY3RzGAEgASgLMicuY29tLmltcHJvdmluZy5vcmdhbml6YXRpb24uQXBpTWVtYmVySWRCF
  OI/ERIPcHJpbWFyeUNvbnRhY3RzUg9wcmltYXJ5Q29udGFjdHMSZwoPYmlsbGluZ0NvbnRhY3RzGAIgAygLMicuY29tLmltcHJvd
  mluZy5vcmdhbml6YXRpb24uQXBpTWVtYmVySWRCFOI/ERIPYmlsbGluZ0NvbnRhY3RzUg9iaWxsaW5nQ29udGFjdHMSdgoUZGlzd
  HJpYnV0aW9uQ29udGFjdHMYAyADKAsyJy5jb20uaW1wcm92aW5nLm9yZ2FuaXphdGlvbi5BcGlNZW1iZXJJZEIZ4j8WEhRkaXN0c
  mlidXRpb25Db250YWN0c1IUZGlzdHJpYnV0aW9uQ29udGFjdHMiZAoOQXBpQ29udGFjdExpc3QSUgoIY29udGFjdHMYASADKAsyJ
  y5jb20uaW1wcm92aW5nLm9yZ2FuaXphdGlvbi5BcGlDb250YWN0c0IN4j8KEghjb250YWN0c1IIY29udGFjdHMiVAoNQXBpTWVtY
  mVyTGlzdBJDCgltZW1iZXJfaWQYASADKAsyFy5jb20uaW1wcm92aW5nLk1lbWJlcklkQg3iPwoSCG1lbWJlcklkUghtZW1iZXJJZ
  CJMCgxBcGlPd25lckxpc3QSPAoGb3duZXJzGAEgAygLMhcuY29tLmltcHJvdmluZy5NZW1iZXJJZEIL4j8IEgZvd25lcnNSBm93b
  mVycyKVAgoNQXBpVXBkYXRlSW5mbxIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSLAoJc2hvcnROYW1lGAIgASgJQg7iP
  wsSCXNob3J0TmFtZVIJc2hvcnROYW1lEk4KB2FkZHJlc3MYAyABKAsyJi5jb20uaW1wcm92aW5nLm9yZ2FuaXphdGlvbi5BcGlBZ
  GRyZXNzQgziPwkSB2FkZHJlc3NSB2FkZHJlc3MSLAoJaXNQcml2YXRlGAQgASgIQg7iPwsSCWlzUHJpdmF0ZVIJaXNQcml2YXRlE
  hoKA3VybBgFIAEoCUII4j8FEgN1cmxSA3VybBIdCgRsb2dvGAYgASgJQgniPwYSBGxvZ29SBGxvZ28iuQEKG0FwaUFkZE1lbWJlc
  nNUb09yZ2FuaXphdGlvbhImCgZvcmdfaWQYASABKAlCD+I/BxIFb3JnSWTCQwIIAVIFb3JnSWQSNAoNbWVtYmVyX3RvX2FkZBgCI
  AEoCUIQ4j8NEgttZW1iZXJUb0FkZFILbWVtYmVyVG9BZGQSPAoPdXBkYXRpbmdfbWVtYmVyGAMgASgJQhPiPxASDnVwZGF0aW5nT
  WVtYmVyUg51cGRhdGluZ01lbWJlciK4AQoaQXBpQWRkT3duZXJzVG9Pcmdhbml6YXRpb24SJgoGb3JnX2lkGAEgASgJQg/iPwcSB
  W9yZ0lkwkMCCAFSBW9yZ0lkEjQKDW93bmVyc190b19hZGQYAiABKAlCEOI/DRILb3duZXJzVG9BZGRSC293bmVyc1RvQWRkEjwKD
  3VwZGF0aW5nX21lbWJlchgDIAEoCUIT4j8QEg51cGRhdGluZ01lbWJlclIOdXBkYXRpbmdNZW1iZXIizgEKF0FwaUVkaXRPcmdhb
  ml6YXRpb25JbmZvEiYKBm9yZ19pZBgBIAEoCUIP4j8HEgVvcmdJZMJDAggBUgVvcmdJZBJRCgduZXdJbmZvGAIgASgLMikuY29tL
  mltcHJvdmluZy5vcmdhbml6YXRpb24uQXBpVXBkYXRlSW5mb0IM4j8JEgduZXdJbmZvUgduZXdJbmZvEjgKDWVkaXRpbmdNZW1iZ
  XIYAyABKAlCEuI/DxINZWRpdGluZ01lbWJlclINZWRpdGluZ01lbWJlciK9BAoYQXBpRXN0YWJsaXNoT3JnYW5pemF0aW9uEiYKB
  m9yZ19pZBgBIAEoCUIP4j8HEgVvcmdJZMJDAggBUgVvcmdJZBJCCgRpbmZvGAIgASgLMiMuY29tLmltcHJvdmluZy5vcmdhbml6Y
  XRpb24uQXBpSW5mb0IJ4j8GEgRpbmZvUgRpbmZvEkoKBnBhcmVudBgDIAEoCzIlLmNvbS5pbXByb3Zpbmcub3JnYW5pemF0aW9uL
  kFwaVBhcmVudEIL4j8IEgZwYXJlbnRSBnBhcmVudBJRCgdtZW1iZXJzGAQgASgLMikuY29tLmltcHJvdmluZy5vcmdhbml6YXRpb
  24uQXBpTWVtYmVyTGlzdEIM4j8JEgdtZW1iZXJzUgdtZW1iZXJzEk0KBm93bmVycxgFIAEoCzIoLmNvbS5pbXByb3Zpbmcub3JnY
  W5pemF0aW9uLkFwaU93bmVyTGlzdEIL4j8IEgZvd25lcnNSBm93bmVycxJVCghjb250YWN0cxgGIAEoCzIqLmNvbS5pbXByb3Zpb
  mcub3JnYW5pemF0aW9uLkFwaUNvbnRhY3RMaXN0Qg3iPwoSCGNvbnRhY3RzUghjb250YWN0cxJwChJlc3RhYmxpc2hpbmdNZW1iZ
  XIYByABKAsyJy5jb20uaW1wcm92aW5nLm9yZ2FuaXphdGlvbi5BcGlNZW1iZXJJZEIX4j8UEhJlc3RhYmxpc2hpbmdNZW1iZXJSE
  mVzdGFibGlzaGluZ01lbWJlciJKCiBBcGlPd25lcnNSZW1vdmVkRnJvbU9yZ2FuaXphdGlvbhImCgZvcmdfaWQYASABKAlCD+I/B
  xIFb3JnSWTCQwIIAVIFb3JnSWQiRgocQXBpUGFyZW50VXBkYXRlZE9yZ2FuaXphdGlvbhImCgZvcmdfaWQYASABKAlCD+I/BxIFb
  3JnSWTCQwIIAVIFb3JnSWQytgwKE09yZ2FuaXphdGlvblNlcnZpY2USmQEKGEFkZE1lbWJlcnNUb09yZ2FuaXphdGlvbhI3LmNvb
  S5pbXByb3Zpbmcub3JnYW5pemF0aW9uLkFwaUFkZE1lbWJlcnNUb09yZ2FuaXphdGlvbhoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0e
  SIsgtPkkwImIiEvb3JnYW5pemF0aW9uL3tvcmdfaWR9L2FkZC1tZW1iZXI6ASoSlgEKF0FkZE93bmVyc1RvT3JnYW5pemF0aW9uE
  jYuY29tLmltcHJvdmluZy5vcmdhbml6YXRpb24uQXBpQWRkT3duZXJzVG9Pcmdhbml6YXRpb24aFi5nb29nbGUucHJvdG9idWYuR
  W1wdHkiK4LT5JMCJSIgL29yZ2FuaXphdGlvbi97b3JnX2lkfS9hZGQtb3duZXI6ASoSnQEKFEVkaXRPcmdhbml6YXRpb25JbmZvE
  jMuY29tLmltcHJvdmluZy5vcmdhbml6YXRpb24uQXBpRWRpdE9yZ2FuaXphdGlvbkluZm8aFi5nb29nbGUucHJvdG9idWYuRW1wd
  HkiOILT5JMCMiItL29yZ2FuaXphdGlvbi97b3JnX2lkfS9lZGl0LW9yZ2FuaXphdGlvbi1pbmZvOgEqEp8BChVFc3RhYmxpc2hPc
  mdhbml6YXRpb24SNC5jb20uaW1wcm92aW5nLm9yZ2FuaXphdGlvbi5BcGlFc3RhYmxpc2hPcmdhbml6YXRpb24aFi5nb29nbGUuc
  HJvdG9idWYuRW1wdHkiOILT5JMCMiItL29yZ2FuaXphdGlvbi97b3JnX2lkfS9lc3RhYmxpc2gtb3JnYW5pemF0aW9uOgEqGqcHy
  kOjBwqgBwo+Y29tLmltcHJvdmluZy5vcmdhbml6YXRpb25jb250ZXh0Lm9yZ2FuaXphdGlvbi5Pcmdhbml6YXRpb25BUEkSDG9yZ
  2FuaXphdGlvbhpAY29tLmltcHJvdmluZy5vcmdhbml6YXRpb25jb250ZXh0Lm9yZ2FuaXphdGlvbi5Pcmdhbml6YXRpb25TdGF0Z
  SI7Y29tLmltcHJvdmluZy5vcmdhbml6YXRpb25jb250ZXh0LkZpbmRPcmdhbml6YXRpb25zQnlNZW1iZXIiOmNvbS5pbXByb3Zpb
  mcub3JnYW5pemF0aW9uY29udGV4dC5GaW5kT3JnYW5pemF0aW9uc0J5T3duZXIiNWNvbS5pbXByb3Zpbmcub3JnYW5pemF0aW9uY
  29udGV4dC5HZXRPcmdhbml6YXRpb25JbmZvIjxjb20uaW1wcm92aW5nLm9yZ2FuaXphdGlvbmNvbnRleHQuTWVtYmVyc0FkZGVkV
  G9Pcmdhbml6YXRpb24iQGNvbS5pbXByb3Zpbmcub3JnYW5pemF0aW9uY29udGV4dC5NZW1iZXJzUmVtb3ZlZEZyb21Pcmdhbml6Y
  XRpb24iPWNvbS5pbXByb3Zpbmcub3JnYW5pemF0aW9uY29udGV4dC5Pcmdhbml6YXRpb25BY2NvdW50c1VwZGF0ZWQiPWNvbS5pb
  XByb3Zpbmcub3JnYW5pemF0aW9uY29udGV4dC5Pcmdhbml6YXRpb25Db250YWN0c1VwZGF0ZWQiOWNvbS5pbXByb3Zpbmcub3JnY
  W5pemF0aW9uY29udGV4dC5Pcmdhbml6YXRpb25Fc3RhYmxpc2hlZCI5Y29tLmltcHJvdmluZy5vcmdhbml6YXRpb25jb250ZXh0L
  k9yZ2FuaXphdGlvbkluZm9VcGRhdGVkIjtjb20uaW1wcm92aW5nLm9yZ2FuaXphdGlvbmNvbnRleHQuT3JnYW5pemF0aW9uU3Rhd
  HVzVXBkYXRlZCI7Y29tLmltcHJvdmluZy5vcmdhbml6YXRpb25jb250ZXh0Lk93bmVyc0FkZGVkVG9Pcmdhbml6YXRpb24iP2Nvb
  S5pbXByb3Zpbmcub3JnYW5pemF0aW9uY29udGV4dC5Pd25lcnNSZW1vdmVkRnJvbU9yZ2FuaXphdGlvbiIvY29tLmltcHJvdmluZ
  y5vcmdhbml6YXRpb25jb250ZXh0LlBhcmVudFVwZGF0ZWRiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.improving.CommonDomainProto.javaDescriptor,
      com.improving.organizationcontext.OrganizationContextDomainProto.javaDescriptor,
      com.improving.organizationcontext.organization.OrganizationDomainProto.javaDescriptor,
      com.google.protobuf.empty.EmptyProto.javaDescriptor,
      kalix.AnnotationsProto.javaDescriptor,
      com.google.api.AnnotationsProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}