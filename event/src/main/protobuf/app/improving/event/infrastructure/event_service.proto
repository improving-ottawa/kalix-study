syntax = "proto3";


package app.improving.eventcontext.event;

import "app/improving/event/api/event_api.proto";
import "common_api.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "kalix/annotations.proto";

service EventService {

    option (kalix.codegen) = {
        event_sourced_entity: {
            name: "app.improving.eventcontext.event.EventAPI"
            entity_type: "events"
            state: "app.improving.eventcontext.event.EventState"
            events: [
                "app.improving.eventcontext.EventInfoChanged",
                "app.improving.eventcontext.EventScheduled",
                "app.improving.eventcontext.EventCancelled",
                "app.improving.eventcontext.EventRescheduled",
                "app.improving.eventcontext.EventDelayed",
                "app.improving.eventcontext.EventStarted",
                "app.improving.eventcontext.EventEnded",
                "app.improving.eventcontext.ReservationAddedToEvent"]
        }
    };

    rpc ScheduleEvent(event.ApiScheduleEvent) returns (ApiEventId) {
        option (google.api.http) = {
            post: "/event/schedule-event"
            body: "*"
        };
    }

    rpc ChangeEventInfo(event.ApiChangeEventInfo) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/change-event-info"
            body: "*"
        };
    }

    rpc CancelEvent(event.ApiCancelEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/cancel-event"
            body: "cancellingMember"
        };
    }

    rpc RescheduleEvent(event.ApiRescheduleEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/reschedule-event"
            body: "*"
        };
    }

    rpc DelayEvent(event.ApiDelayEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/delay-event"
            body: "*"
        };
    }

    rpc StartEvent(event.ApiStartEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/start-event"
            body: "startingMember"
        };
    }

    rpc EndEvent(event.ApiEndEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/end-event"
            body: "endingMember"
        };
    }

    rpc AddLiveUpdate(event.ApiAddLiveUpdate) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event_id}/add-live-update"
            body: "update"
        };
    }

    rpc GetEventById(event.ApiGetEventById) returns (event.ApiEvent) {
        option (google.api.http) = {
            get: "/event/{event_id}"
        };
    }

    rpc AddReservationToEvent(event.ApiAddReservationToEvent) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/event/{event-id}/add-reservation-to-event"
            body: "*"
        };
    }
}
