syntax = "proto3";

package app.improving.productcontext;

import "app/improving/event/api/event_api.proto";
import "app/improving/product/api/product_api.proto";
import "app/improving/product/domain/product_context_domain.proto";
import "app/improving/product/view/product_view_common.proto";
import "kalix/annotations.proto";

/**
 * "SELECT"
 *            "members.memberId AS memberId "
 *            "members.info AS info "
 *            "members.meta AS meta "
 *            "members.meta.memberStatus AS status "
 *            "FROM members "
 *            "JOIN orders ON orders.meta.memberId = members.member_id "
 *            "JOIN products ON products.product_id = ANY(orders.lineItems.product.id) "
 *            "JOIN events ON products.info.event.id = events.event_id "
 *            "WHERE :given_time >= events.info.expectedStart AND :given_time < events.info.expectedEnd "
 */



service TicketByEventTimeQuery {
    option (kalix.codegen) = {
        view: {}
    };


    rpc ProcessProductCreated(productcontext.ProductCreated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "products"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_product"
            transform_updates: true
        };
    }

    rpc ProcessProductInfoUpdated(productcontext.ProductInfoUpdated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "products"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_product"
            transform_updates: true
        };
    }

    rpc ProcessProductDeleted(productcontext.ProductDeleted) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "products"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_product"
            transform_updates: true
        };
    }

    rpc ProcessProductActivated(productcontext.ProductActivated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "products"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_product"
            transform_updates: true
        };
    }

    rpc ProcessProductInactivated(productcontext.ProductInactivated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "products"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_product"
            transform_updates: true
        };
    }

    rpc ProcessEventScheduled(eventcontext.event.ApiEventScheduled) returns (eventcontext.event.ApiEvent) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-event"
            event_stream_id: "event_events"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_event"
            transform_updates: true
        };
    }

    rpc ProcessEventRescheduled(eventcontext.event.ApiEventRescheduled) returns (eventcontext.event.ApiEvent) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-event"
            event_stream_id: "event_events"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_event"
            transform_updates: true
        };
    }

    rpc ProcessEventStarted(eventcontext.event.ApiEventStarted) returns (eventcontext.event.ApiEvent) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-event"
            event_stream_id: "event_events"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_event"
            transform_updates: true
        };
    }

    rpc ProcessEventEnded(eventcontext.event.ApiEventEnded) returns (eventcontext.event.ApiEvent) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-event"
            event_stream_id: "event_events"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_event"
            transform_updates: true
        };
    }

    rpc ProcessEventDelayed(eventcontext.event.ApiEventDelayed) returns (eventcontext.event.ApiEvent) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-event"
            event_stream_id: "event_events"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_event"
            transform_updates: true
        };
    }

    rpc ProcessEventCancelled(eventcontext.event.ApiEventCancelled) returns (eventcontext.event.ApiEvent) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-event"
            event_stream_id: "event_events"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_event"
            transform_updates: true
        };
    }

    rpc ProcessReservationAddedToEvent(eventcontext.event.ApiReservationAddedToEvent) returns (eventcontext.event.ApiEvent) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-event"
            event_stream_id: "event_events"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_time_event"
            transform_updates: true
        };
    }

    rpc FindProductsByEventTime(TicketByEventTimeRequest) returns (TicketByEventTimeResponse) {
        option (kalix.method).view.query = {
            query: "SELECT "
                    "(ticket_by_event_time_product.sku, ticket_by_event_time_product.info, ticket_by_event_time_product.meta, ticket_by_event_time_product.status, ticket_by_event_time_product.event)  AS products "
                    "FROM ticket_by_event_time_product "
                    "JOIN ticket_by_event_time_event ON ticket_by_event_time_product.event.event_id = ticket_by_event_time_event.event_id "
                    "WHERE :given_time >= ticket_by_event_time_event.info.expected_start AND :given_time < ticket_by_event_time_event.info.expected_end  "
        };
    }


}
