syntax = "proto3";

package app.improving.productcontext;


import "app/improving/product/domain/product_context_domain.proto";
import "app/improving/product/view/product_view_common.proto";
import "kalix/annotations.proto";




service TicketByEventView {
    option (kalix.codegen) = {
        view: {}
    };
    rpc ProcessProductCreated(productcontext.ProductCreated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "products"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_product"
            transform_updates: true
        };
    }

    rpc ProcessProductInfoUpdated(productcontext.ProductInfoUpdated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "products"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_product"
            transform_updates: true
        };
    }

    rpc ProcessProductDeleted(productcontext.ProductDeleted) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "products"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_product"
            transform_updates: true
        };
    }

    rpc ProcessProductActivated(productcontext.ProductActivated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "products"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_product"
            transform_updates: true
        };
    }

    rpc ProcessProductInactivated(productcontext.ProductInactivated) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "products"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_product"
            transform_updates: true
        };
    }

    rpc ProcessProductReleased(productcontext.ProductReleased) returns (TicketEventCorrTableRow) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "products"
        };
        option (kalix.method).view.update = {
            table: "ticket_by_event_product"
            transform_updates: true
        };
    }

    rpc FindMembersByEventTime(TicketByEventRequest) returns (stream TicketByEventResponse) {
        option (kalix.method).view.query = {
            query: "SELECT "
                    "ticket_by_event_product.sku, ticket_by_event_product.info, ticket_by_event_product.meta, ticket_by_event_product.status "
                    "FROM ticket_by_event_product LIMIT 999 "
                    "WHERE ticket_by_event_product.event.event_id = :event_id"
        };
    }


}
