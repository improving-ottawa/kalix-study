syntax = "proto3";


package app.improving.membercontext;

import "app/improving/member/api/member_api.proto";
import "app/improving/member/domain/member_context_domain.proto";
import "app/improving/order/api/order_api.proto";
import "kalix/annotations.proto";

/**
 * "SELECT"
 *            "members.memberId AS memberId "
 *            "members.info AS info "
 *            "members.meta AS meta "
 *            "members.meta.memberStatus AS status "
 *            "FROM members "
 *            "JOIN orders ON orders.meta.memberId = members.member_id "
 *            "JOIN products ON products.product_id = ANY(orders.lineItems.product.id) "
 *            "JOIN events ON products.info.event.id = events.event_id "
 *            "WHERE :given_time >= events.info.expectedStart AND :given_time < events.info.expectedEnd "
 */

message MemberByOrderRequest {
    string order_id = 1;
}

message MemberByOrderResponse {
    repeated member.ApiMemberData members = 1;
}

service MemberByOrderQuery {
    option (kalix.codegen) = {
        view: {}
    };

    rpc ProcessRegisterMember(MemberRegistered) returns (app.improving.membercontext.member.ApiMemberData) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "members"
        };
        option (kalix.method).view.update = {
            table: "member_by_order_member"
            transform_updates: true
        };
    }

    rpc ProcessUpdateMemberStatus(MemberStatusUpdated) returns (app.improving.membercontext.member.ApiMemberData) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "members"
        };
        option (kalix.method).view.update = {
            table: "member_by_order_member"
            transform_updates: true
        };
    }

    rpc ProcessUpdateMemberInfo(MemberInfoUpdated) returns (app.improving.membercontext.member.ApiMemberData) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "members"
        };
        option (kalix.method).view.update = {
            table: "member_by_order_member"
            transform_updates: true
        };
    }

    rpc ProcessReleaseMember(MemberReleased) returns (app.improving.membercontext.member.ApiMemberData) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "members"
        };
        option (kalix.method).view.update = {
            table: "member_by_order_member"
            transform_updates: true
        };
    }

    //    rpc ProcessRegisterMemberList(MemberListRegistered) returns (app.improving.membercontext.member.ApiMemberData) {
    //        option (kalix.method).eventing.in = {
    //            event_sourced_entity: "members"
    //        };
    //        option (kalix.method).view.update = {
    //            table: "member_by_order_member"
    //            transform_updates: true
    //        };
    //    }

    rpc ProcessOrderCreated(ordercontext.order.ApiOrderCreated) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-order"
            event_stream_id: "event_orders"
        };
        option (kalix.method).view.update = {
            table: "member_by_order_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderStatusUpdated(ordercontext.order.ApiOrderStatusUpdated) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-order"
            event_stream_id: "event_orders"
        };
        option (kalix.method).view.update = {
            table: "member_by_order_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderInfoUpdated(ordercontext.order.ApiOrderInfoUpdated) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-order"
            event_stream_id: "event_orders"
        };
        option (kalix.method).view.update = {
            table: "member_by_order_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderCanceled(ordercontext.order.ApiOrderCanceled) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-order"
            event_stream_id: "event_orders"
        };
        option (kalix.method).view.update = {
            table: "member_by_order_order"
            transform_updates: true
        };
    }

    rpc ProcessOrderReleased(ordercontext.order.ApiOrderReleased) returns (ordercontext.order.ApiOrder) {
        option (kalix.method).eventing.in.direct = {
            service: "kalix-study-order"
            event_stream_id: "event_orders"
        };
        option (kalix.method).view.update = {
            table: "member_by_order_order"
            transform_updates: true
        };
    }


    rpc FindMembersByOrder(MemberByOrderRequest) returns (MemberByOrderResponse) {
        option (kalix.method).view.query = {
            query: "SELECT "
                    "(member_by_order_member.member_id AS member_id, member_by_order_member.info AS info, member_by_order_member.meta AS meta) AS members "
                    "FROM  member_by_order_member "
                    "JOIN member_by_order_order ON member_by_order_order.meta.member_id.member_id = member_by_order_member.member_id "
                    "WHERE member_by_order_order.order_id = :order_id "

        };
    }
}