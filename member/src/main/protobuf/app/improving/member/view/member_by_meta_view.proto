syntax = "proto3";


package app.improving.membercontext;

import "app/improving/member/api/member_api.proto";
import "app/improving/member/domain/member_context_domain.proto";
import "common_api.proto";
import "google/protobuf/timestamp.proto";
import "kalix/annotations.proto";

message ApiMetaInfoQuery {
    google.protobuf.Timestamp createdOn = 1;
    ApiMemberId createdBy = 2;
    google.protobuf.Timestamp lastModifiedOn = 3;
    ApiMemberId lastModifiedBy = 4;
    member.ApiMemberStatus memberStatus = 5;
}

message ByMetaInfoRequest {
    ApiMetaInfoQuery queryData = 1;
}

service MemberByMetaInfoView {
    option (kalix.codegen) = {
        view: {}
    };

    rpc ProcessRegisterMember(MemberRegistered) returns (app.improving.membercontext.member.ApiMemberData) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "members"
        };
        option (kalix.method).view.update = {
            table: "member_by_meta_info"
            transform_updates: true
        };
    }

    rpc ProcessUpdateMemberStatus(MemberStatusUpdated) returns (app.improving.membercontext.member.ApiMemberData) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "members"
        };
        option (kalix.method).view.update = {
            table: "member_by_meta_info"
            transform_updates: true
        };
    }

    rpc ProcessUpdateMemberInfo(MemberInfoUpdated) returns (app.improving.membercontext.member.ApiMemberData) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "members"
        };
        option (kalix.method).view.update = {
            table: "member_by_meta_info"
            transform_updates: true
        };
    }

    rpc ProcessRegisterMemberList(MemberListRegistered) returns (app.improving.membercontext.member.ApiMemberData) {
        option (kalix.method).eventing.in = {
            event_sourced_entity: "members"
        };
        option (kalix.method).view.update = {
            table: "member_by_meta_info"
            transform_updates: true
        };
    }

    //WHERE :queryData.createdBy.member_id = memberId.memberId.member_id  OR :queryData.createdOn = meta.createdOn OR :queryData.lastModifiedOn = meta.lastModifiedOn OR :queryData.lastModifiedBy = meta.lastModifiedBy OR :queryData.memberStatus = meta.memberStatus
    rpc GetMembersByMetaInfo(ByMetaInfoRequest) returns (stream app.improving.membercontext.member.ApiMemberData) {
        option (kalix.method).view.query = {
            query: "SELECT * FROM member_by_meta_info "
        };
    }
}